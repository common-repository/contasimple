<?php
/**
 * CompanyExtraInformationApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Model;

use \ArrayAccess;

/**
 * CompanyExtraInformationApiModel Class Doc Comment
 *
 * @category    Class */
 // @description Contains extra configuration for the company
/**
 * @package     Contasimple\Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompanyExtraInformationApiModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CompanyExtraInformationApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'entity' => '\Contasimple\Swagger\Client\Model\EntityApiModel',
        'custom_auto_number_format' => 'string',
        'invoice_data_filled' => 'bool',
        'custom_estimate_auto_number_format' => 'string',
        'custom_delivery_note_auto_number_format' => 'string',
        'vat_name' => 'string',
        're_name' => 'string',
        'retention_name' => 'string',
        'company_identifier_name' => 'string',
        'currency_symbol' => 'string',
        'currency_symbol_is_suffix' => 'bool',
        'invoice_culture' => 'string',
        'estimate_culture' => 'string',
        'delivery_note_culture' => 'string',
        'import_delivery_note_line_by_line' => 'bool',
        'custom_entity_field1_name' => 'string',
        'custom_entity_field2_name' => 'string',
        'enable_pagination_in_lists' => 'bool',
        'vat_types' => '\Contasimple\Swagger\Client\Model\VatTypeApiModel[]',
        're_types' => '\Contasimple\Swagger\Client\Model\ReTypeApiModel[]',
        'retention_types' => '\Contasimple\Swagger\Client\Model\RetentionTypeApiModel[]',
        'sign_electronic_invoices' => 'string',
        'sign_pdf_invoices' => 'string',
        'sign_pdf_estimates' => 'string',
        'sign_pdf_delivery_notes' => 'string',
        'sign_virtual_drive_files' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'entity' => 'entity',
        'custom_auto_number_format' => 'customAutoNumberFormat',
        'invoice_data_filled' => 'invoiceDataFilled',
        'custom_estimate_auto_number_format' => 'customEstimateAutoNumberFormat',
        'custom_delivery_note_auto_number_format' => 'customDeliveryNoteAutoNumberFormat',
        'vat_name' => 'vatName',
        're_name' => 'reName',
        'retention_name' => 'retentionName',
        'company_identifier_name' => 'companyIdentifierName',
        'currency_symbol' => 'currencySymbol',
        'currency_symbol_is_suffix' => 'currencySymbolIsSuffix',
        'invoice_culture' => 'invoiceCulture',
        'estimate_culture' => 'estimateCulture',
        'delivery_note_culture' => 'deliveryNoteCulture',
        'import_delivery_note_line_by_line' => 'importDeliveryNoteLineByLine',
        'custom_entity_field1_name' => 'customEntityField1Name',
        'custom_entity_field2_name' => 'customEntityField2Name',
        'enable_pagination_in_lists' => 'enablePaginationInLists',
        'vat_types' => 'vatTypes',
        're_types' => 'reTypes',
        'retention_types' => 'retentionTypes',
        'sign_electronic_invoices' => 'signElectronicInvoices',
        'sign_pdf_invoices' => 'signPDFInvoices',
        'sign_pdf_estimates' => 'signPDFEstimates',
        'sign_pdf_delivery_notes' => 'signPDFDeliveryNotes',
        'sign_virtual_drive_files' => 'signVirtualDriveFiles'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'entity' => 'setEntity',
        'custom_auto_number_format' => 'setCustomAutoNumberFormat',
        'invoice_data_filled' => 'setInvoiceDataFilled',
        'custom_estimate_auto_number_format' => 'setCustomEstimateAutoNumberFormat',
        'custom_delivery_note_auto_number_format' => 'setCustomDeliveryNoteAutoNumberFormat',
        'vat_name' => 'setVatName',
        're_name' => 'setReName',
        'retention_name' => 'setRetentionName',
        'company_identifier_name' => 'setCompanyIdentifierName',
        'currency_symbol' => 'setCurrencySymbol',
        'currency_symbol_is_suffix' => 'setCurrencySymbolIsSuffix',
        'invoice_culture' => 'setInvoiceCulture',
        'estimate_culture' => 'setEstimateCulture',
        'delivery_note_culture' => 'setDeliveryNoteCulture',
        'import_delivery_note_line_by_line' => 'setImportDeliveryNoteLineByLine',
        'custom_entity_field1_name' => 'setCustomEntityField1Name',
        'custom_entity_field2_name' => 'setCustomEntityField2Name',
        'enable_pagination_in_lists' => 'setEnablePaginationInLists',
        'vat_types' => 'setVatTypes',
        're_types' => 'setReTypes',
        'retention_types' => 'setRetentionTypes',
        'sign_electronic_invoices' => 'setSignElectronicInvoices',
        'sign_pdf_invoices' => 'setSignPdfInvoices',
        'sign_pdf_estimates' => 'setSignPdfEstimates',
        'sign_pdf_delivery_notes' => 'setSignPdfDeliveryNotes',
        'sign_virtual_drive_files' => 'setSignVirtualDriveFiles'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'entity' => 'getEntity',
        'custom_auto_number_format' => 'getCustomAutoNumberFormat',
        'invoice_data_filled' => 'getInvoiceDataFilled',
        'custom_estimate_auto_number_format' => 'getCustomEstimateAutoNumberFormat',
        'custom_delivery_note_auto_number_format' => 'getCustomDeliveryNoteAutoNumberFormat',
        'vat_name' => 'getVatName',
        're_name' => 'getReName',
        'retention_name' => 'getRetentionName',
        'company_identifier_name' => 'getCompanyIdentifierName',
        'currency_symbol' => 'getCurrencySymbol',
        'currency_symbol_is_suffix' => 'getCurrencySymbolIsSuffix',
        'invoice_culture' => 'getInvoiceCulture',
        'estimate_culture' => 'getEstimateCulture',
        'delivery_note_culture' => 'getDeliveryNoteCulture',
        'import_delivery_note_line_by_line' => 'getImportDeliveryNoteLineByLine',
        'custom_entity_field1_name' => 'getCustomEntityField1Name',
        'custom_entity_field2_name' => 'getCustomEntityField2Name',
        'enable_pagination_in_lists' => 'getEnablePaginationInLists',
        'vat_types' => 'getVatTypes',
        're_types' => 'getReTypes',
        'retention_types' => 'getRetentionTypes',
        'sign_electronic_invoices' => 'getSignElectronicInvoices',
        'sign_pdf_invoices' => 'getSignPdfInvoices',
        'sign_pdf_estimates' => 'getSignPdfEstimates',
        'sign_pdf_delivery_notes' => 'getSignPdfDeliveryNotes',
        'sign_virtual_drive_files' => 'getSignVirtualDriveFiles'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SIGN_ELECTRONIC_INVOICES_NO_SIGN = 'NoSign';
    const SIGN_ELECTRONIC_INVOICES_SIGN_WITH_DOMAIN_CERT = 'SignWithDomainCert';
    const SIGN_ELECTRONIC_INVOICES_SIGN_WITH_COMPANY_CERT = 'SignWithCompanyCert';
    const SIGN_PDF_INVOICES_NO_SIGN = 'NoSign';
    const SIGN_PDF_INVOICES_SIGN_WITH_DOMAIN_CERT = 'SignWithDomainCert';
    const SIGN_PDF_INVOICES_SIGN_WITH_COMPANY_CERT = 'SignWithCompanyCert';
    const SIGN_PDF_ESTIMATES_NO_SIGN = 'NoSign';
    const SIGN_PDF_ESTIMATES_SIGN_WITH_DOMAIN_CERT = 'SignWithDomainCert';
    const SIGN_PDF_ESTIMATES_SIGN_WITH_COMPANY_CERT = 'SignWithCompanyCert';
    const SIGN_PDF_DELIVERY_NOTES_NO_SIGN = 'NoSign';
    const SIGN_PDF_DELIVERY_NOTES_SIGN_WITH_DOMAIN_CERT = 'SignWithDomainCert';
    const SIGN_PDF_DELIVERY_NOTES_SIGN_WITH_COMPANY_CERT = 'SignWithCompanyCert';
    const SIGN_VIRTUAL_DRIVE_FILES_NO_SIGN = 'NoSign';
    const SIGN_VIRTUAL_DRIVE_FILES_SIGN_WITH_DOMAIN_CERT = 'SignWithDomainCert';
    const SIGN_VIRTUAL_DRIVE_FILES_SIGN_WITH_COMPANY_CERT = 'SignWithCompanyCert';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSignElectronicInvoicesAllowableValues()
    {
        return [
            self::SIGN_ELECTRONIC_INVOICES_NO_SIGN,
            self::SIGN_ELECTRONIC_INVOICES_SIGN_WITH_DOMAIN_CERT,
            self::SIGN_ELECTRONIC_INVOICES_SIGN_WITH_COMPANY_CERT,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSignPdfInvoicesAllowableValues()
    {
        return [
            self::SIGN_PDF_INVOICES_NO_SIGN,
            self::SIGN_PDF_INVOICES_SIGN_WITH_DOMAIN_CERT,
            self::SIGN_PDF_INVOICES_SIGN_WITH_COMPANY_CERT,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSignPdfEstimatesAllowableValues()
    {
        return [
            self::SIGN_PDF_ESTIMATES_NO_SIGN,
            self::SIGN_PDF_ESTIMATES_SIGN_WITH_DOMAIN_CERT,
            self::SIGN_PDF_ESTIMATES_SIGN_WITH_COMPANY_CERT,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSignPdfDeliveryNotesAllowableValues()
    {
        return [
            self::SIGN_PDF_DELIVERY_NOTES_NO_SIGN,
            self::SIGN_PDF_DELIVERY_NOTES_SIGN_WITH_DOMAIN_CERT,
            self::SIGN_PDF_DELIVERY_NOTES_SIGN_WITH_COMPANY_CERT,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSignVirtualDriveFilesAllowableValues()
    {
        return [
            self::SIGN_VIRTUAL_DRIVE_FILES_NO_SIGN,
            self::SIGN_VIRTUAL_DRIVE_FILES_SIGN_WITH_DOMAIN_CERT,
            self::SIGN_VIRTUAL_DRIVE_FILES_SIGN_WITH_COMPANY_CERT,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['custom_auto_number_format'] = isset($data['custom_auto_number_format']) ? $data['custom_auto_number_format'] : null;
        $this->container['invoice_data_filled'] = isset($data['invoice_data_filled']) ? $data['invoice_data_filled'] : null;
        $this->container['custom_estimate_auto_number_format'] = isset($data['custom_estimate_auto_number_format']) ? $data['custom_estimate_auto_number_format'] : null;
        $this->container['custom_delivery_note_auto_number_format'] = isset($data['custom_delivery_note_auto_number_format']) ? $data['custom_delivery_note_auto_number_format'] : null;
        $this->container['vat_name'] = isset($data['vat_name']) ? $data['vat_name'] : null;
        $this->container['re_name'] = isset($data['re_name']) ? $data['re_name'] : null;
        $this->container['retention_name'] = isset($data['retention_name']) ? $data['retention_name'] : null;
        $this->container['company_identifier_name'] = isset($data['company_identifier_name']) ? $data['company_identifier_name'] : null;
        $this->container['currency_symbol'] = isset($data['currency_symbol']) ? $data['currency_symbol'] : null;
        $this->container['currency_symbol_is_suffix'] = isset($data['currency_symbol_is_suffix']) ? $data['currency_symbol_is_suffix'] : null;
        $this->container['invoice_culture'] = isset($data['invoice_culture']) ? $data['invoice_culture'] : null;
        $this->container['estimate_culture'] = isset($data['estimate_culture']) ? $data['estimate_culture'] : null;
        $this->container['delivery_note_culture'] = isset($data['delivery_note_culture']) ? $data['delivery_note_culture'] : null;
        $this->container['import_delivery_note_line_by_line'] = isset($data['import_delivery_note_line_by_line']) ? $data['import_delivery_note_line_by_line'] : null;
        $this->container['custom_entity_field1_name'] = isset($data['custom_entity_field1_name']) ? $data['custom_entity_field1_name'] : null;
        $this->container['custom_entity_field2_name'] = isset($data['custom_entity_field2_name']) ? $data['custom_entity_field2_name'] : null;
        $this->container['enable_pagination_in_lists'] = isset($data['enable_pagination_in_lists']) ? $data['enable_pagination_in_lists'] : null;
        $this->container['vat_types'] = isset($data['vat_types']) ? $data['vat_types'] : null;
        $this->container['re_types'] = isset($data['re_types']) ? $data['re_types'] : null;
        $this->container['retention_types'] = isset($data['retention_types']) ? $data['retention_types'] : null;
        $this->container['sign_electronic_invoices'] = isset($data['sign_electronic_invoices']) ? $data['sign_electronic_invoices'] : null;
        $this->container['sign_pdf_invoices'] = isset($data['sign_pdf_invoices']) ? $data['sign_pdf_invoices'] : null;
        $this->container['sign_pdf_estimates'] = isset($data['sign_pdf_estimates']) ? $data['sign_pdf_estimates'] : null;
        $this->container['sign_pdf_delivery_notes'] = isset($data['sign_pdf_delivery_notes']) ? $data['sign_pdf_delivery_notes'] : null;
        $this->container['sign_virtual_drive_files'] = isset($data['sign_virtual_drive_files']) ? $data['sign_virtual_drive_files'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_electronic_invoices'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sign_electronic_invoices', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_pdf_invoices'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sign_pdf_invoices', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_pdf_estimates'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sign_pdf_estimates', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_pdf_delivery_notes'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sign_pdf_delivery_notes', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_virtual_drive_files'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sign_virtual_drive_files', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_electronic_invoices'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_pdf_invoices'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_pdf_estimates'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_pdf_delivery_notes'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NoSign", "SignWithDomainCert", "SignWithCompanyCert"];
        if (!in_array($this->container['sign_virtual_drive_files'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The identifier of the exttra information
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets entity
     * @return \Contasimple\Swagger\Client\Model\EntityApiModel
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     * @param \Contasimple\Swagger\Client\Model\EntityApiModel $entity The company owner entity
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets custom_auto_number_format
     * @return string
     */
    public function getCustomAutoNumberFormat()
    {
        return $this->container['custom_auto_number_format'];
    }

    /**
     * Sets custom_auto_number_format
     * @param string $custom_auto_number_format The company autonumbering format
     * @return $this
     */
    public function setCustomAutoNumberFormat($custom_auto_number_format)
    {
        $this->container['custom_auto_number_format'] = $custom_auto_number_format;

        return $this;
    }

    /**
     * Gets invoice_data_filled
     * @return bool
     */
    public function getInvoiceDataFilled()
    {
        return $this->container['invoice_data_filled'];
    }

    /**
     * Sets invoice_data_filled
     * @param bool $invoice_data_filled Indicates if the company invoice data have been filled
     * @return $this
     */
    public function setInvoiceDataFilled($invoice_data_filled)
    {
        $this->container['invoice_data_filled'] = $invoice_data_filled;

        return $this;
    }

    /**
     * Gets custom_estimate_auto_number_format
     * @return string
     */
    public function getCustomEstimateAutoNumberFormat()
    {
        return $this->container['custom_estimate_auto_number_format'];
    }

    /**
     * Sets custom_estimate_auto_number_format
     * @param string $custom_estimate_auto_number_format The company autonumbering format for estimates
     * @return $this
     */
    public function setCustomEstimateAutoNumberFormat($custom_estimate_auto_number_format)
    {
        $this->container['custom_estimate_auto_number_format'] = $custom_estimate_auto_number_format;

        return $this;
    }

    /**
     * Gets custom_delivery_note_auto_number_format
     * @return string
     */
    public function getCustomDeliveryNoteAutoNumberFormat()
    {
        return $this->container['custom_delivery_note_auto_number_format'];
    }

    /**
     * Sets custom_delivery_note_auto_number_format
     * @param string $custom_delivery_note_auto_number_format The company autonumbering format for delivery notes
     * @return $this
     */
    public function setCustomDeliveryNoteAutoNumberFormat($custom_delivery_note_auto_number_format)
    {
        $this->container['custom_delivery_note_auto_number_format'] = $custom_delivery_note_auto_number_format;

        return $this;
    }

    /**
     * Gets vat_name
     * @return string
     */
    public function getVatName()
    {
        return $this->container['vat_name'];
    }

    /**
     * Sets vat_name
     * @param string $vat_name The name of the VAT tax
     * @return $this
     */
    public function setVatName($vat_name)
    {
        $this->container['vat_name'] = $vat_name;

        return $this;
    }

    /**
     * Gets re_name
     * @return string
     */
    public function getReName()
    {
        return $this->container['re_name'];
    }

    /**
     * Sets re_name
     * @param string $re_name The name of the RE tax
     * @return $this
     */
    public function setReName($re_name)
    {
        $this->container['re_name'] = $re_name;

        return $this;
    }

    /**
     * Gets retention_name
     * @return string
     */
    public function getRetentionName()
    {
        return $this->container['retention_name'];
    }

    /**
     * Sets retention_name
     * @param string $retention_name The name of the retention tax
     * @return $this
     */
    public function setRetentionName($retention_name)
    {
        $this->container['retention_name'] = $retention_name;

        return $this;
    }

    /**
     * Gets company_identifier_name
     * @return string
     */
    public function getCompanyIdentifierName()
    {
        return $this->container['company_identifier_name'];
    }

    /**
     * Sets company_identifier_name
     * @param string $company_identifier_name The name of the Company Identifier (NIF title)
     * @return $this
     */
    public function setCompanyIdentifierName($company_identifier_name)
    {
        $this->container['company_identifier_name'] = $company_identifier_name;

        return $this;
    }

    /**
     * Gets currency_symbol
     * @return string
     */
    public function getCurrencySymbol()
    {
        return $this->container['currency_symbol'];
    }

    /**
     * Sets currency_symbol
     * @param string $currency_symbol The symbol of the company currency
     * @return $this
     */
    public function setCurrencySymbol($currency_symbol)
    {
        $this->container['currency_symbol'] = $currency_symbol;

        return $this;
    }

    /**
     * Gets currency_symbol_is_suffix
     * @return bool
     */
    public function getCurrencySymbolIsSuffix()
    {
        return $this->container['currency_symbol_is_suffix'];
    }

    /**
     * Sets currency_symbol_is_suffix
     * @param bool $currency_symbol_is_suffix Indicates if the currency sumbol goes after (true) or before (false) the value
     * @return $this
     */
    public function setCurrencySymbolIsSuffix($currency_symbol_is_suffix)
    {
        $this->container['currency_symbol_is_suffix'] = $currency_symbol_is_suffix;

        return $this;
    }

    /**
     * Gets invoice_culture
     * @return string
     */
    public function getInvoiceCulture()
    {
        return $this->container['invoice_culture'];
    }

    /**
     * Sets invoice_culture
     * @param string $invoice_culture The culture for company invoices
     * @return $this
     */
    public function setInvoiceCulture($invoice_culture)
    {
        $this->container['invoice_culture'] = $invoice_culture;

        return $this;
    }

    /**
     * Gets estimate_culture
     * @return string
     */
    public function getEstimateCulture()
    {
        return $this->container['estimate_culture'];
    }

    /**
     * Sets estimate_culture
     * @param string $estimate_culture The culture for company estimates
     * @return $this
     */
    public function setEstimateCulture($estimate_culture)
    {
        $this->container['estimate_culture'] = $estimate_culture;

        return $this;
    }

    /**
     * Gets delivery_note_culture
     * @return string
     */
    public function getDeliveryNoteCulture()
    {
        return $this->container['delivery_note_culture'];
    }

    /**
     * Sets delivery_note_culture
     * @param string $delivery_note_culture The culture for company delivery notes
     * @return $this
     */
    public function setDeliveryNoteCulture($delivery_note_culture)
    {
        $this->container['delivery_note_culture'] = $delivery_note_culture;

        return $this;
    }

    /**
     * Gets import_delivery_note_line_by_line
     * @return bool
     */
    public function getImportDeliveryNoteLineByLine()
    {
        return $this->container['import_delivery_note_line_by_line'];
    }

    /**
     * Sets import_delivery_note_line_by_line
     * @param bool $import_delivery_note_line_by_line When we invoice a delivery note, wether we should group lines of the delivery note or not.
     * @return $this
     */
    public function setImportDeliveryNoteLineByLine($import_delivery_note_line_by_line)
    {
        $this->container['import_delivery_note_line_by_line'] = $import_delivery_note_line_by_line;

        return $this;
    }

    /**
     * Gets custom_entity_field1_name
     * @return string
     */
    public function getCustomEntityField1Name()
    {
        return $this->container['custom_entity_field1_name'];
    }

    /**
     * Sets custom_entity_field1_name
     * @param string $custom_entity_field1_name The name of the company custom field 1
     * @return $this
     */
    public function setCustomEntityField1Name($custom_entity_field1_name)
    {
        $this->container['custom_entity_field1_name'] = $custom_entity_field1_name;

        return $this;
    }

    /**
     * Gets custom_entity_field2_name
     * @return string
     */
    public function getCustomEntityField2Name()
    {
        return $this->container['custom_entity_field2_name'];
    }

    /**
     * Sets custom_entity_field2_name
     * @param string $custom_entity_field2_name The name of the company custom field 2
     * @return $this
     */
    public function setCustomEntityField2Name($custom_entity_field2_name)
    {
        $this->container['custom_entity_field2_name'] = $custom_entity_field2_name;

        return $this;
    }

    /**
     * Gets enable_pagination_in_lists
     * @return bool
     */
    public function getEnablePaginationInLists()
    {
        return $this->container['enable_pagination_in_lists'];
    }

    /**
     * Sets enable_pagination_in_lists
     * @param bool $enable_pagination_in_lists Enable or disable pagination on lists
     * @return $this
     */
    public function setEnablePaginationInLists($enable_pagination_in_lists)
    {
        $this->container['enable_pagination_in_lists'] = $enable_pagination_in_lists;

        return $this;
    }

    /**
     * Gets vat_types
     * @return \Contasimple\Swagger\Client\Model\VatTypeApiModel[]
     */
    public function getVatTypes()
    {
        return $this->container['vat_types'];
    }

    /**
     * Sets vat_types
     * @param \Contasimple\Swagger\Client\Model\VatTypeApiModel[] $vat_types The list of VAT types for the company
     * @return $this
     */
    public function setVatTypes($vat_types)
    {
        $this->container['vat_types'] = $vat_types;

        return $this;
    }

    /**
     * Gets re_types
     * @return \Contasimple\Swagger\Client\Model\ReTypeApiModel[]
     */
    public function getReTypes()
    {
        return $this->container['re_types'];
    }

    /**
     * Sets re_types
     * @param \Contasimple\Swagger\Client\Model\ReTypeApiModel[] $re_types The list of RE types for the company
     * @return $this
     */
    public function setReTypes($re_types)
    {
        $this->container['re_types'] = $re_types;

        return $this;
    }

    /**
     * Gets retention_types
     * @return \Contasimple\Swagger\Client\Model\RetentionTypeApiModel[]
     */
    public function getRetentionTypes()
    {
        return $this->container['retention_types'];
    }

    /**
     * Sets retention_types
     * @param \Contasimple\Swagger\Client\Model\RetentionTypeApiModel[] $retention_types The list of retention types for the company
     * @return $this
     */
    public function setRetentionTypes($retention_types)
    {
        $this->container['retention_types'] = $retention_types;

        return $this;
    }

    /**
     * Gets sign_electronic_invoices
     * @return string
     */
    public function getSignElectronicInvoices()
    {
        return $this->container['sign_electronic_invoices'];
    }

    /**
     * Sets sign_electronic_invoices
     * @param string $sign_electronic_invoices The sign option for the electronic invoices
     * @return $this
     */
    public function setSignElectronicInvoices($sign_electronic_invoices)
    {
        $allowed_values = array('NoSign', 'SignWithDomainCert', 'SignWithCompanyCert');
        if (!is_null($sign_electronic_invoices) && (!in_array($sign_electronic_invoices, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sign_electronic_invoices', must be one of 'NoSign', 'SignWithDomainCert', 'SignWithCompanyCert'");
        }
        $this->container['sign_electronic_invoices'] = $sign_electronic_invoices;

        return $this;
    }

    /**
     * Gets sign_pdf_invoices
     * @return string
     */
    public function getSignPdfInvoices()
    {
        return $this->container['sign_pdf_invoices'];
    }

    /**
     * Sets sign_pdf_invoices
     * @param string $sign_pdf_invoices The sign option for the PDF invoices
     * @return $this
     */
    public function setSignPdfInvoices($sign_pdf_invoices)
    {
        $allowed_values = array('NoSign', 'SignWithDomainCert', 'SignWithCompanyCert');
        if (!is_null($sign_pdf_invoices) && (!in_array($sign_pdf_invoices, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sign_pdf_invoices', must be one of 'NoSign', 'SignWithDomainCert', 'SignWithCompanyCert'");
        }
        $this->container['sign_pdf_invoices'] = $sign_pdf_invoices;

        return $this;
    }

    /**
     * Gets sign_pdf_estimates
     * @return string
     */
    public function getSignPdfEstimates()
    {
        return $this->container['sign_pdf_estimates'];
    }

    /**
     * Sets sign_pdf_estimates
     * @param string $sign_pdf_estimates The sign option for the PDF Estimates
     * @return $this
     */
    public function setSignPdfEstimates($sign_pdf_estimates)
    {
        $allowed_values = array('NoSign', 'SignWithDomainCert', 'SignWithCompanyCert');
        if (!is_null($sign_pdf_estimates) && (!in_array($sign_pdf_estimates, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sign_pdf_estimates', must be one of 'NoSign', 'SignWithDomainCert', 'SignWithCompanyCert'");
        }
        $this->container['sign_pdf_estimates'] = $sign_pdf_estimates;

        return $this;
    }

    /**
     * Gets sign_pdf_delivery_notes
     * @return string
     */
    public function getSignPdfDeliveryNotes()
    {
        return $this->container['sign_pdf_delivery_notes'];
    }

    /**
     * Sets sign_pdf_delivery_notes
     * @param string $sign_pdf_delivery_notes The sign option for the PDF Delivery notes
     * @return $this
     */
    public function setSignPdfDeliveryNotes($sign_pdf_delivery_notes)
    {
        $allowed_values = array('NoSign', 'SignWithDomainCert', 'SignWithCompanyCert');
        if (!is_null($sign_pdf_delivery_notes) && (!in_array($sign_pdf_delivery_notes, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sign_pdf_delivery_notes', must be one of 'NoSign', 'SignWithDomainCert', 'SignWithCompanyCert'");
        }
        $this->container['sign_pdf_delivery_notes'] = $sign_pdf_delivery_notes;

        return $this;
    }

    /**
     * Gets sign_virtual_drive_files
     * @return string
     */
    public function getSignVirtualDriveFiles()
    {
        return $this->container['sign_virtual_drive_files'];
    }

    /**
     * Sets sign_virtual_drive_files
     * @param string $sign_virtual_drive_files The sign option for the virtual drive files
     * @return $this
     */
    public function setSignVirtualDriveFiles($sign_virtual_drive_files)
    {
        $allowed_values = array('NoSign', 'SignWithDomainCert', 'SignWithCompanyCert');
        if (!is_null($sign_virtual_drive_files) && (!in_array($sign_virtual_drive_files, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sign_virtual_drive_files', must be one of 'NoSign', 'SignWithDomainCert', 'SignWithCompanyCert'");
        }
        $this->container['sign_virtual_drive_files'] = $sign_virtual_drive_files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

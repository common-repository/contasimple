<?php
/**
 * ConfigureCompanyApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Model;

use \ArrayAccess;

/**
 * ConfigureCompanyApiModel Class Doc Comment
 *
 * @category    Class */
 // @description Contains the information to configura a company
/**
 * @package     Contasimple\Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConfigureCompanyApiModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ConfigureCompanyApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country_id' => 'int',
        'fiscal_region_id' => 'int',
        'company_type_id' => 'int',
        'irpf_mode_id' => 'int',
        'vat_mode_id' => 'int',
        'entity' => '\Contasimple\Swagger\Client\Model\ConfigureCompanyEntityApiModel'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'country_id' => 'countryId',
        'fiscal_region_id' => 'fiscalRegionId',
        'company_type_id' => 'companyTypeId',
        'irpf_mode_id' => 'irpfModeId',
        'vat_mode_id' => 'vatModeId',
        'entity' => 'entity'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'country_id' => 'setCountryId',
        'fiscal_region_id' => 'setFiscalRegionId',
        'company_type_id' => 'setCompanyTypeId',
        'irpf_mode_id' => 'setIrpfModeId',
        'vat_mode_id' => 'setVatModeId',
        'entity' => 'setEntity'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'country_id' => 'getCountryId',
        'fiscal_region_id' => 'getFiscalRegionId',
        'company_type_id' => 'getCompanyTypeId',
        'irpf_mode_id' => 'getIrpfModeId',
        'vat_mode_id' => 'getVatModeId',
        'entity' => 'getEntity'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['fiscal_region_id'] = isset($data['fiscal_region_id']) ? $data['fiscal_region_id'] : null;
        $this->container['company_type_id'] = isset($data['company_type_id']) ? $data['company_type_id'] : null;
        $this->container['irpf_mode_id'] = isset($data['irpf_mode_id']) ? $data['irpf_mode_id'] : null;
        $this->container['vat_mode_id'] = isset($data['vat_mode_id']) ? $data['vat_mode_id'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets country_id
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     * @param int $country_id The identifier of the country to select
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets fiscal_region_id
     * @return int
     */
    public function getFiscalRegionId()
    {
        return $this->container['fiscal_region_id'];
    }

    /**
     * Sets fiscal_region_id
     * @param int $fiscal_region_id The identifier of the fiscal region
     * @return $this
     */
    public function setFiscalRegionId($fiscal_region_id)
    {
        $this->container['fiscal_region_id'] = $fiscal_region_id;

        return $this;
    }

    /**
     * Gets company_type_id
     * @return int
     */
    public function getCompanyTypeId()
    {
        return $this->container['company_type_id'];
    }

    /**
     * Sets company_type_id
     * @param int $company_type_id The identifier of the company type
     * @return $this
     */
    public function setCompanyTypeId($company_type_id)
    {
        $this->container['company_type_id'] = $company_type_id;

        return $this;
    }

    /**
     * Gets irpf_mode_id
     * @return int
     */
    public function getIrpfModeId()
    {
        return $this->container['irpf_mode_id'];
    }

    /**
     * Sets irpf_mode_id
     * @param int $irpf_mode_id The identifier of the IRPF mode
     * @return $this
     */
    public function setIrpfModeId($irpf_mode_id)
    {
        $this->container['irpf_mode_id'] = $irpf_mode_id;

        return $this;
    }

    /**
     * Gets vat_mode_id
     * @return int
     */
    public function getVatModeId()
    {
        return $this->container['vat_mode_id'];
    }

    /**
     * Sets vat_mode_id
     * @param int $vat_mode_id The identifier of the VAT mode
     * @return $this
     */
    public function setVatModeId($vat_mode_id)
    {
        $this->container['vat_mode_id'] = $vat_mode_id;

        return $this;
    }

    /**
     * Gets entity
     * @return \Contasimple\Swagger\Client\Model\ConfigureCompanyEntityApiModel
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     * @param \Contasimple\Swagger\Client\Model\ConfigureCompanyEntityApiModel $entity THe information of the company entity
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

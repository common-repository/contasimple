<?php
/**
 * InvoiceLineApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Model;

use \ArrayAccess;

/**
 * InvoiceLineApiModel Class Doc Comment
 *
 * @category    Class */
 // @description Defines the information for an invoice line
/**
 * @package     Contasimple\Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoiceLineApiModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceLineApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'concept' => 'string',
        'quantity' => 'double',
        'unit_taxable_amount' => 'double',
        'vat_percentage' => 'double',
        'vat_amount' => 'double',
        're_percentage' => 'double',
        're_amount' => 'double',
        'total_taxable_amount' => 'double',
        'discount_percentage' => 'double',
        'detailed_description' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'concept' => 'concept',
        'quantity' => 'quantity',
        'unit_taxable_amount' => 'unitTaxableAmount',
        'vat_percentage' => 'vatPercentage',
        'vat_amount' => 'vatAmount',
        're_percentage' => 'rePercentage',
        're_amount' => 'reAmount',
        'total_taxable_amount' => 'totalTaxableAmount',
        'discount_percentage' => 'discountPercentage',
        'detailed_description' => 'detailedDescription'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'concept' => 'setConcept',
        'quantity' => 'setQuantity',
        'unit_taxable_amount' => 'setUnitTaxableAmount',
        'vat_percentage' => 'setVatPercentage',
        'vat_amount' => 'setVatAmount',
        're_percentage' => 'setRePercentage',
        're_amount' => 'setReAmount',
        'total_taxable_amount' => 'setTotalTaxableAmount',
        'discount_percentage' => 'setDiscountPercentage',
        'detailed_description' => 'setDetailedDescription'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'concept' => 'getConcept',
        'quantity' => 'getQuantity',
        'unit_taxable_amount' => 'getUnitTaxableAmount',
        'vat_percentage' => 'getVatPercentage',
        'vat_amount' => 'getVatAmount',
        're_percentage' => 'getRePercentage',
        're_amount' => 'getReAmount',
        'total_taxable_amount' => 'getTotalTaxableAmount',
        'discount_percentage' => 'getDiscountPercentage',
        'detailed_description' => 'getDetailedDescription'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['concept'] = isset($data['concept']) ? $data['concept'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_taxable_amount'] = isset($data['unit_taxable_amount']) ? $data['unit_taxable_amount'] : null;
        $this->container['vat_percentage'] = isset($data['vat_percentage']) ? $data['vat_percentage'] : null;
        $this->container['vat_amount'] = isset($data['vat_amount']) ? $data['vat_amount'] : null;
        $this->container['re_percentage'] = isset($data['re_percentage']) ? $data['re_percentage'] : null;
        $this->container['re_amount'] = isset($data['re_amount']) ? $data['re_amount'] : null;
        $this->container['total_taxable_amount'] = isset($data['total_taxable_amount']) ? $data['total_taxable_amount'] : null;
        $this->container['discount_percentage'] = isset($data['discount_percentage']) ? $data['discount_percentage'] : null;
        $this->container['detailed_description'] = isset($data['detailed_description']) ? $data['detailed_description'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The identifier of the invoice line
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets concept
     * @return string
     */
    public function getConcept()
    {
        return $this->container['concept'];
    }

    /**
     * Sets concept
     * @param string $concept The line concept
     * @return $this
     */
    public function setConcept($concept)
    {
        $this->container['concept'] = $concept;

        return $this;
    }

    /**
     * Gets quantity
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param double $quantity The line items quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_taxable_amount
     * @return double
     */
    public function getUnitTaxableAmount()
    {
        return $this->container['unit_taxable_amount'];
    }

    /**
     * Sets unit_taxable_amount
     * @param double $unit_taxable_amount Gets or Sets the unit price (the price for a single unit of product) for the invoice line.   The total taxable amount for the line will be UnitTaxableAmount * Quantity.
     * @return $this
     */
    public function setUnitTaxableAmount($unit_taxable_amount)
    {
        $this->container['unit_taxable_amount'] = $unit_taxable_amount;

        return $this;
    }

    /**
     * Gets vat_percentage
     * @return double
     */
    public function getVatPercentage()
    {
        return $this->container['vat_percentage'];
    }

    /**
     * Sets vat_percentage
     * @param double $vat_percentage Gets or Sets the VAT percentage of a single unit of product. If the TotalVATAmount property is set it takes precedence over   this property and the value returned is computed from the TotalVATAmount and UnitTaxableAmount properties.
     * @return $this
     */
    public function setVatPercentage($vat_percentage)
    {
        $this->container['vat_percentage'] = $vat_percentage;

        return $this;
    }

    /**
     * Gets vat_amount
     * @return double
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     * @param double $vat_amount Gets or Sets the total VAT amount for the invoice line.
     * @return $this
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets re_percentage
     * @return double
     */
    public function getRePercentage()
    {
        return $this->container['re_percentage'];
    }

    /**
     * Sets re_percentage
     * @param double $re_percentage The RE percentage
     * @return $this
     */
    public function setRePercentage($re_percentage)
    {
        $this->container['re_percentage'] = $re_percentage;

        return $this;
    }

    /**
     * Gets re_amount
     * @return double
     */
    public function getReAmount()
    {
        return $this->container['re_amount'];
    }

    /**
     * Sets re_amount
     * @param double $re_amount The RE amount
     * @return $this
     */
    public function setReAmount($re_amount)
    {
        $this->container['re_amount'] = $re_amount;

        return $this;
    }

    /**
     * Gets total_taxable_amount
     * @return double
     */
    public function getTotalTaxableAmount()
    {
        return $this->container['total_taxable_amount'];
    }

    /**
     * Sets total_taxable_amount
     * @param double $total_taxable_amount The TotalTaxableAmount of the invoice line
     * @return $this
     */
    public function setTotalTaxableAmount($total_taxable_amount)
    {
        $this->container['total_taxable_amount'] = $total_taxable_amount;

        return $this;
    }

    /**
     * Gets discount_percentage
     * @return double
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     * @param double $discount_percentage The discount percentage to apply to the invoice line
     * @return $this
     */
    public function setDiscountPercentage($discount_percentage)
    {
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets detailed_description
     * @return string
     */
    public function getDetailedDescription()
    {
        return $this->container['detailed_description'];
    }

    /**
     * Sets detailed_description
     * @param string $detailed_description A detailed description for the invoice line
     * @return $this
     */
    public function setDetailedDescription($detailed_description)
    {
        $this->container['detailed_description'] = $detailed_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

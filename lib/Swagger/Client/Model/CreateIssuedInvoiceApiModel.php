<?php
/**
 * CreateIssuedInvoiceApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Model;

use \ArrayAccess;

/**
 * CreateIssuedInvoiceApiModel Class Doc Comment
 *
 * @category    Class
 * @description Defines the information for creating an issued invoice
 * @package     Contasimple\Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateIssuedInvoiceApiModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     * @var string
     */
    protected static $swaggerModelName = 'CreateIssuedInvoiceApiModel';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerTypes = [
        'target_entity_id' => 'int',
        'related_estimates_id' => 'int',
        'related_delivery_notes_id' => 'int[]',
        'rectifies_invoice_id' => 'int',
        'numbering_format_id' => 'int',
        'number' => 'string',
        'date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'operation_date' => '\DateTime',
        'invoice_class' => 'int',
        'notes' => 'string',
        'footer' => 'string',
        'retention_percentage' => 'double',
        'operation_type' => 'string',
        'lines' => '\Contasimple\Swagger\Client\Model\InvoiceLineRequestApiModel[]'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerFormats = [
        'target_entity_id' => 'int64',
        'related_estimates_id' => 'int64',
        'related_delivery_notes_id' => 'int64',
        'rectifies_invoice_id' => 'int64',
        'numbering_format_id' => 'int64',
        'number' => null,
        'date' => 'date-time',
        'expiration_date' => 'date-time',
        'operation_date' => 'date-time',
        'invoice_class' => 'int32',
        'notes' => null,
        'footer' => null,
        'retention_percentage' => 'double',
        'operation_type' => null,
        'lines' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'target_entity_id' => 'targetEntityId',
        'related_estimates_id' => 'relatedEstimatesId',
        'related_delivery_notes_id' => 'relatedDeliveryNotesId',
        'rectifies_invoice_id' => 'rectifiesInvoiceId',
        'numbering_format_id' => 'numberingFormatId',
        'number' => 'number',
        'date' => 'date',
        'expiration_date' => 'expirationDate',
        'operation_date' => 'operationDate',
        'invoice_class' => 'invoiceClass',
        'notes' => 'notes',
        'footer' => 'footer',
        'retention_percentage' => 'retentionPercentage',
        'operation_type' => 'operationType',
        'lines' => 'lines'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'target_entity_id' => 'setTargetEntityId',
        'related_estimates_id' => 'setRelatedEstimatesId',
        'related_delivery_notes_id' => 'setRelatedDeliveryNotesId',
        'rectifies_invoice_id' => 'setRectifiesInvoiceId',
        'numbering_format_id' => 'setNumberingFormatId',
        'number' => 'setNumber',
        'date' => 'setDate',
        'expiration_date' => 'setExpirationDate',
        'operation_date' => 'setOperationDate',
        'invoice_class' => 'setInvoiceClass',
        'notes' => 'setNotes',
        'footer' => 'setFooter',
        'retention_percentage' => 'setRetentionPercentage',
        'operation_type' => 'setOperationType',
        'lines' => 'setLines'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'target_entity_id' => 'getTargetEntityId',
        'related_estimates_id' => 'getRelatedEstimatesId',
        'related_delivery_notes_id' => 'getRelatedDeliveryNotesId',
        'rectifies_invoice_id' => 'getRectifiesInvoiceId',
        'numbering_format_id' => 'getNumberingFormatId',
        'number' => 'getNumber',
        'date' => 'getDate',
        'expiration_date' => 'getExpirationDate',
        'operation_date' => 'getOperationDate',
        'invoice_class' => 'getInvoiceClass',
        'notes' => 'getNotes',
        'footer' => 'getFooter',
        'retention_percentage' => 'getRetentionPercentage',
        'operation_type' => 'getOperationType',
        'lines' => 'getLines'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['target_entity_id'] = isset($data['target_entity_id']) ? $data['target_entity_id'] : null;
        $this->container['related_estimates_id'] = isset($data['related_estimates_id']) ? $data['related_estimates_id'] : null;
        $this->container['related_delivery_notes_id'] = isset($data['related_delivery_notes_id']) ? $data['related_delivery_notes_id'] : null;
        $this->container['rectifies_invoice_id'] = isset($data['rectifies_invoice_id']) ? $data['rectifies_invoice_id'] : null;
        $this->container['numbering_format_id'] = isset($data['numbering_format_id']) ? $data['numbering_format_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['operation_date'] = isset($data['operation_date']) ? $data['operation_date'] : null;
        $this->container['invoice_class'] = isset($data['invoice_class']) ? $data['invoice_class'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['retention_percentage'] = isset($data['retention_percentage']) ? $data['retention_percentage'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['target_entity_id'] === null) {
            $invalid_properties[] = "'target_entity_id' can't be null";
        }
        if (($this->container['target_entity_id'] < 1)) {
            $invalid_properties[] = "invalid value for 'target_entity_id', must be bigger than or equal to 1.";
        }

        if ($this->container['number'] === null) {
            $invalid_properties[] = "'number' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalid_properties[] = "'date' can't be null";
        }
        if ($this->container['invoice_class'] === null) {
            $invalid_properties[] = "'invoice_class' can't be null";
        }
        if (($this->container['invoice_class'] > 2147483647)) {
            $invalid_properties[] = "invalid value for 'invoice_class', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['invoice_class'] < 1)) {
            $invalid_properties[] = "invalid value for 'invoice_class', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['retention_percentage']) && ($this->container['retention_percentage'] > 100)) {
            $invalid_properties[] = "invalid value for 'retention_percentage', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['retention_percentage']) && ($this->container['retention_percentage'] < 0)) {
            $invalid_properties[] = "invalid value for 'retention_percentage', must be bigger than or equal to 0.";
        }

        if ($this->container['lines'] === null) {
            $invalid_properties[] = "'lines' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['target_entity_id'] === null) {
            return false;
        }
        if ($this->container['target_entity_id'] < 1) {
            return false;
        }
        if ($this->container['number'] === null) {
            return false;
        }
        if ($this->container['date'] === null) {
            return false;
        }
        if ($this->container['invoice_class'] === null) {
            return false;
        }
        if ($this->container['invoice_class'] > 2147483647) {
            return false;
        }
        if ($this->container['invoice_class'] < 1) {
            return false;
        }
        if ($this->container['retention_percentage'] > 100) {
            return false;
        }
        if ($this->container['retention_percentage'] < 0) {
            return false;
        }
        if ($this->container['lines'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets target_entity_id
     * @return int
     */
    public function getTargetEntityId()
    {
        return $this->container['target_entity_id'];
    }

    /**
     * Sets target_entity_id
     * @param int $target_entity_id The identifier of the invoice target
     * @return $this
     */
    public function setTargetEntityId($target_entity_id)
    {

        if (($target_entity_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $target_entity_id when calling CreateIssuedInvoiceApiModel., must be bigger than or equal to 1.');
        }

        $this->container['target_entity_id'] = $target_entity_id;

        return $this;
    }

    /**
     * Gets related_estimates_id
     * @return int
     */
    public function getRelatedEstimatesId()
    {
        return $this->container['related_estimates_id'];
    }

    /**
     * Sets related_estimates_id
     * @param int $related_estimates_id The identifier of the estimate related to the invoice to create (if required)
     * @return $this
     */
    public function setRelatedEstimatesId($related_estimates_id)
    {
        $this->container['related_estimates_id'] = $related_estimates_id;

        return $this;
    }

    /**
     * Gets related_delivery_notes_id
     * @return int[]
     */
    public function getRelatedDeliveryNotesId()
    {
        return $this->container['related_delivery_notes_id'];
    }

    /**
     * Sets related_delivery_notes_id
     * @param int[] $related_delivery_notes_id The identifiers of the delivery notes related to the invoice to create (if required)
     * @return $this
     */
    public function setRelatedDeliveryNotesId($related_delivery_notes_id)
    {
        $this->container['related_delivery_notes_id'] = $related_delivery_notes_id;

        return $this;
    }

    /**
     * Gets rectifies_invoice_id
     * @return int
     */
    public function getRectifiesInvoiceId()
    {
        return $this->container['rectifies_invoice_id'];
    }

    /**
     * Sets rectifies_invoice_id
     * @param int $rectifies_invoice_id If not NULL contains the identifier of the invoice which the current invoice is rectifying
     * @return $this
     */
    public function setRectifiesInvoiceId($rectifies_invoice_id)
    {
        $this->container['rectifies_invoice_id'] = $rectifies_invoice_id;

        return $this;
    }

    /**
     * Gets numbering_format_id
     * @return int
     */
    public function getNumberingFormatId()
    {
        return $this->container['numbering_format_id'];
    }

    /**
     * Sets numbering_format_id
     * @param int $numbering_format_id The id of the numbering format applied to the invoice number (optional)
     * @return $this
     */
    public function setNumberingFormatId($numbering_format_id)
    {
        $this->container['numbering_format_id'] = $numbering_format_id;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number The invoice number to create
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date The invoice date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param \DateTime $expiration_date The invoice expiration time (can be null)
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets operation_date
     * @return \DateTime
     */
    public function getOperationDate()
    {
        return $this->container['operation_date'];
    }

    /**
     * Sets operation_date
     * @param \DateTime $operation_date The operation date of the invoice
     * @return $this
     */
    public function setOperationDate($operation_date)
    {
        $this->container['operation_date'] = $operation_date;

        return $this;
    }

    /**
     * Gets invoice_class
     * @return int
     */
    public function getInvoiceClass()
    {
        return $this->container['invoice_class'];
    }

    /**
     * Sets invoice_class
     * @param int $invoice_class The issued / received invoice class
     * @return $this
     */
    public function setInvoiceClass($invoice_class)
    {

        if (($invoice_class > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $invoice_class when calling CreateIssuedInvoiceApiModel., must be smaller than or equal to 2147483647.');
        }
        if (($invoice_class < 1)) {
            throw new \InvalidArgumentException('invalid value for $invoice_class when calling CreateIssuedInvoiceApiModel., must be bigger than or equal to 1.');
        }

        $this->container['invoice_class'] = $invoice_class;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes Invoice notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets footer
     * @return string
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     * @param string $footer Invoice notes
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets retention_percentage
     * @return double
     */
    public function getRetentionPercentage()
    {
        return $this->container['retention_percentage'];
    }

    /**
     * Sets retention_percentage
     * @param double $retention_percentage The percentage of the retention value
     * @return $this
     */
    public function setRetentionPercentage($retention_percentage)
    {

        if (!is_null($retention_percentage) && ($retention_percentage > 100)) {
            throw new \InvalidArgumentException('invalid value for $retention_percentage when calling CreateIssuedInvoiceApiModel., must be smaller than or equal to 100.');
        }
        if (!is_null($retention_percentage) && ($retention_percentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $retention_percentage when calling CreateIssuedInvoiceApiModel., must be bigger than or equal to 0.');
        }

        $this->container['retention_percentage'] = $retention_percentage;

        return $this;
    }

    /**
     * Gets operation_type
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     * @param string $operation_type The operation type for the invoice.   Depends on the type of invoice and the company configuration.
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets lines
     * @return \Contasimple\Swagger\Client\Model\InvoiceLineRequestApiModel[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     * @param \Contasimple\Swagger\Client\Model\InvoiceLineRequestApiModel[] $lines The number of lines that compose the invoice
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

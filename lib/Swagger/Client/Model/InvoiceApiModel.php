<?php
/**
 * InvoiceApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Model;

use \ArrayAccess;

/**
 * InvoiceApiModel Class Doc Comment
 *
 * @category    Class */
 // @description Contains the information for an invoice
/**
 * @package     Contasimple\Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoiceApiModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'period' => 'string',
        'type' => 'string',
        'number' => 'string',
        'notes' => 'string',
        'invoice_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'creation_date' => '\DateTime',
        'last_update_date' => '\DateTime',
        'status' => 'string',
        'entity_string' => 'string',
        'original_issuer_entity_id' => 'int',
        'original_target_entity_id' => 'int',
        'retention_amount' => 'double',
        'retention_percentage' => 'double',
        'total_taxable_amount' => 'double',
        'total_vat_amount' => 'double',
        'total_amount' => 'double',
        'total_re_amount' => 'double',
        'total_payed_amount' => 'double',
        'total_amount_per_pay' => 'double',
        'total_computable_amount' => 'double',
        'total_computable_amount_for_vat' => 'double',
        'computable_percentage' => 'double',
        'computable_percentage_vat' => 'double',
        'invoice_class' => 'int',
        'operation_type' => 'string',
        'footer' => 'string',
        'is_cash_criteria' => 'bool',
        'aeat_aproved_file_id' => 'int',
        'has_aeat_aproved_file' => 'bool',
        'related_estimate_id' => 'int',
        'issuer' => '\Contasimple\Swagger\Client\Model\DocumentEntityApiModel',
        'target' => '\Contasimple\Swagger\Client\Model\DocumentEntityApiModel',
        'lines' => '\Contasimple\Swagger\Client\Model\InvoiceLineApiModel[]',
        'payments' => '\Contasimple\Swagger\Client\Model\DocumentPaymentApiModel[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'period' => 'period',
        'type' => 'type',
        'number' => 'number',
        'notes' => 'notes',
        'invoice_date' => 'invoiceDate',
        'expiration_date' => 'expirationDate',
        'creation_date' => 'creationDate',
        'last_update_date' => 'lastUpdateDate',
        'status' => 'status',
        'entity_string' => 'entityString',
        'original_issuer_entity_id' => 'originalIssuerEntityID',
        'original_target_entity_id' => 'originalTargetEntityID',
        'retention_amount' => 'retentionAmount',
        'retention_percentage' => 'retentionPercentage',
        'total_taxable_amount' => 'totalTaxableAmount',
        'total_vat_amount' => 'totalVatAmount',
        'total_amount' => 'totalAmount',
        'total_re_amount' => 'totalReAmount',
        'total_payed_amount' => 'totalPayedAmount',
        'total_amount_per_pay' => 'totalAmountPerPay',
        'total_computable_amount' => 'totalComputableAmount',
        'total_computable_amount_for_vat' => 'totalComputableAmountForVAT',
        'computable_percentage' => 'computablePercentage',
        'computable_percentage_vat' => 'computablePercentageVAT',
        'invoice_class' => 'invoiceClass',
        'operation_type' => 'operationType',
        'footer' => 'footer',
        'is_cash_criteria' => 'isCashCriteria',
        'aeat_aproved_file_id' => 'aeatAprovedFileId',
        'has_aeat_aproved_file' => 'hasAeatAprovedFile',
        'related_estimate_id' => 'relatedEstimateId',
        'issuer' => 'issuer',
        'target' => 'target',
        'lines' => 'lines',
        'payments' => 'payments'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'period' => 'setPeriod',
        'type' => 'setType',
        'number' => 'setNumber',
        'notes' => 'setNotes',
        'invoice_date' => 'setInvoiceDate',
        'expiration_date' => 'setExpirationDate',
        'creation_date' => 'setCreationDate',
        'last_update_date' => 'setLastUpdateDate',
        'status' => 'setStatus',
        'entity_string' => 'setEntityString',
        'original_issuer_entity_id' => 'setOriginalIssuerEntityId',
        'original_target_entity_id' => 'setOriginalTargetEntityId',
        'retention_amount' => 'setRetentionAmount',
        'retention_percentage' => 'setRetentionPercentage',
        'total_taxable_amount' => 'setTotalTaxableAmount',
        'total_vat_amount' => 'setTotalVatAmount',
        'total_amount' => 'setTotalAmount',
        'total_re_amount' => 'setTotalReAmount',
        'total_payed_amount' => 'setTotalPayedAmount',
        'total_amount_per_pay' => 'setTotalAmountPerPay',
        'total_computable_amount' => 'setTotalComputableAmount',
        'total_computable_amount_for_vat' => 'setTotalComputableAmountForVat',
        'computable_percentage' => 'setComputablePercentage',
        'computable_percentage_vat' => 'setComputablePercentageVat',
        'invoice_class' => 'setInvoiceClass',
        'operation_type' => 'setOperationType',
        'footer' => 'setFooter',
        'is_cash_criteria' => 'setIsCashCriteria',
        'aeat_aproved_file_id' => 'setAeatAprovedFileId',
        'has_aeat_aproved_file' => 'setHasAeatAprovedFile',
        'related_estimate_id' => 'setRelatedEstimateId',
        'issuer' => 'setIssuer',
        'target' => 'setTarget',
        'lines' => 'setLines',
        'payments' => 'setPayments'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'period' => 'getPeriod',
        'type' => 'getType',
        'number' => 'getNumber',
        'notes' => 'getNotes',
        'invoice_date' => 'getInvoiceDate',
        'expiration_date' => 'getExpirationDate',
        'creation_date' => 'getCreationDate',
        'last_update_date' => 'getLastUpdateDate',
        'status' => 'getStatus',
        'entity_string' => 'getEntityString',
        'original_issuer_entity_id' => 'getOriginalIssuerEntityId',
        'original_target_entity_id' => 'getOriginalTargetEntityId',
        'retention_amount' => 'getRetentionAmount',
        'retention_percentage' => 'getRetentionPercentage',
        'total_taxable_amount' => 'getTotalTaxableAmount',
        'total_vat_amount' => 'getTotalVatAmount',
        'total_amount' => 'getTotalAmount',
        'total_re_amount' => 'getTotalReAmount',
        'total_payed_amount' => 'getTotalPayedAmount',
        'total_amount_per_pay' => 'getTotalAmountPerPay',
        'total_computable_amount' => 'getTotalComputableAmount',
        'total_computable_amount_for_vat' => 'getTotalComputableAmountForVat',
        'computable_percentage' => 'getComputablePercentage',
        'computable_percentage_vat' => 'getComputablePercentageVat',
        'invoice_class' => 'getInvoiceClass',
        'operation_type' => 'getOperationType',
        'footer' => 'getFooter',
        'is_cash_criteria' => 'getIsCashCriteria',
        'aeat_aproved_file_id' => 'getAeatAprovedFileId',
        'has_aeat_aproved_file' => 'getHasAeatAprovedFile',
        'related_estimate_id' => 'getRelatedEstimateId',
        'issuer' => 'getIssuer',
        'target' => 'getTarget',
        'lines' => 'getLines',
        'payments' => 'getPayments'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_ISSUED = 'Issued';
    const TYPE_RECEIVED = 'Received';
    const TYPE_AMORTIZED = 'Amortized';
    const STATUS_PENDING = 'Pending';
    const STATUS_INCOMPLETE = 'Incomplete';
    const STATUS_PAYED = 'Payed';
    const OPERATION_TYPE_NACIONAL = 'Nacional';
    const OPERATION_TYPE_NAC_NO_SUJETA = 'NacNoSujeta';
    const OPERATION_TYPE_INTRACUMUNITARIA = 'Intracumunitaria';
    const OPERATION_TYPE_EXPORTACION = 'Exportacion';
    const OPERATION_TYPE_IMPORTACION = 'Importacion';
    const OPERATION_TYPE_NACIONAL_EXENTA = 'NacionalExenta';
    const OPERATION_TYPE_INVERSION_SUJETO_PASIVO = 'InversionSujetoPasivo';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ISSUED,
            self::TYPE_RECEIVED,
            self::TYPE_AMORTIZED,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_INCOMPLETE,
            self::STATUS_PAYED,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOperationTypeAllowableValues()
    {
        return [
            self::OPERATION_TYPE_NACIONAL,
            self::OPERATION_TYPE_NAC_NO_SUJETA,
            self::OPERATION_TYPE_INTRACUMUNITARIA,
            self::OPERATION_TYPE_EXPORTACION,
            self::OPERATION_TYPE_IMPORTACION,
            self::OPERATION_TYPE_NACIONAL_EXENTA,
            self::OPERATION_TYPE_INVERSION_SUJETO_PASIVO,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['last_update_date'] = isset($data['last_update_date']) ? $data['last_update_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['entity_string'] = isset($data['entity_string']) ? $data['entity_string'] : null;
        $this->container['original_issuer_entity_id'] = isset($data['original_issuer_entity_id']) ? $data['original_issuer_entity_id'] : null;
        $this->container['original_target_entity_id'] = isset($data['original_target_entity_id']) ? $data['original_target_entity_id'] : null;
        $this->container['retention_amount'] = isset($data['retention_amount']) ? $data['retention_amount'] : null;
        $this->container['retention_percentage'] = isset($data['retention_percentage']) ? $data['retention_percentage'] : null;
        $this->container['total_taxable_amount'] = isset($data['total_taxable_amount']) ? $data['total_taxable_amount'] : null;
        $this->container['total_vat_amount'] = isset($data['total_vat_amount']) ? $data['total_vat_amount'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['total_re_amount'] = isset($data['total_re_amount']) ? $data['total_re_amount'] : null;
        $this->container['total_payed_amount'] = isset($data['total_payed_amount']) ? $data['total_payed_amount'] : null;
        $this->container['total_amount_per_pay'] = isset($data['total_amount_per_pay']) ? $data['total_amount_per_pay'] : null;
        $this->container['total_computable_amount'] = isset($data['total_computable_amount']) ? $data['total_computable_amount'] : null;
        $this->container['total_computable_amount_for_vat'] = isset($data['total_computable_amount_for_vat']) ? $data['total_computable_amount_for_vat'] : null;
        $this->container['computable_percentage'] = isset($data['computable_percentage']) ? $data['computable_percentage'] : null;
        $this->container['computable_percentage_vat'] = isset($data['computable_percentage_vat']) ? $data['computable_percentage_vat'] : null;
        $this->container['invoice_class'] = isset($data['invoice_class']) ? $data['invoice_class'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['is_cash_criteria'] = isset($data['is_cash_criteria']) ? $data['is_cash_criteria'] : null;
        $this->container['aeat_aproved_file_id'] = isset($data['aeat_aproved_file_id']) ? $data['aeat_aproved_file_id'] : null;
        $this->container['has_aeat_aproved_file'] = isset($data['has_aeat_aproved_file']) ? $data['has_aeat_aproved_file'] : null;
        $this->container['related_estimate_id'] = isset($data['related_estimate_id']) ? $data['related_estimate_id'] : null;
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["Issued", "Received", "Amortized"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Pending", "Incomplete", "Payed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Nacional", "NacNoSujeta", "Intracumunitaria", "Exportacion", "Importacion", "NacionalExenta", "InversionSujetoPasivo"];
        if (!in_array($this->container['operation_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'operation_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["Issued", "Received", "Amortized"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Pending", "Incomplete", "Payed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Nacional", "NacNoSujeta", "Intracumunitaria", "Exportacion", "Importacion", "NacionalExenta", "InversionSujetoPasivo"];
        if (!in_array($this->container['operation_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The identifier of the invoice
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets period
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     * @param string $period The invoice period
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The invoice type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('Issued', 'Received', 'Amortized');
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'Issued', 'Received', 'Amortized'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number The invoice number
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets invoice_date
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     * @param \DateTime $invoice_date The invoice date
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param \DateTime $expiration_date Contains invoice expiration date (cuold be null)
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets creation_date
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param \DateTime $creation_date The date when the invoice was created
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets last_update_date
     * @return \DateTime
     */
    public function getLastUpdateDate()
    {
        return $this->container['last_update_date'];
    }

    /**
     * Sets last_update_date
     * @param \DateTime $last_update_date The last time the invoice was updated
     * @return $this
     */
    public function setLastUpdateDate($last_update_date)
    {
        $this->container['last_update_date'] = $last_update_date;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status The current status of the invoice
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('Pending', 'Incomplete', 'Payed');
        if (!is_null($status) && (!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'Pending', 'Incomplete', 'Payed'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets entity_string
     * @return string
     */
    public function getEntityString()
    {
        return $this->container['entity_string'];
    }

    /**
     * Sets entity_string
     * @param string $entity_string The name that represents the issuer or target entity of the invoice
     * @return $this
     */
    public function setEntityString($entity_string)
    {
        $this->container['entity_string'] = $entity_string;

        return $this;
    }

    /**
     * Gets original_issuer_entity_id
     * @return int
     */
    public function getOriginalIssuerEntityId()
    {
        return $this->container['original_issuer_entity_id'];
    }

    /**
     * Sets original_issuer_entity_id
     * @param int $original_issuer_entity_id Original ID of the issuer of the invoice
     * @return $this
     */
    public function setOriginalIssuerEntityId($original_issuer_entity_id)
    {
        $this->container['original_issuer_entity_id'] = $original_issuer_entity_id;

        return $this;
    }

    /**
     * Gets original_target_entity_id
     * @return int
     */
    public function getOriginalTargetEntityId()
    {
        return $this->container['original_target_entity_id'];
    }

    /**
     * Sets original_target_entity_id
     * @param int $original_target_entity_id Original ID of the target of the invoice
     * @return $this
     */
    public function setOriginalTargetEntityId($original_target_entity_id)
    {
        $this->container['original_target_entity_id'] = $original_target_entity_id;

        return $this;
    }

    /**
     * Gets retention_amount
     * @return double
     */
    public function getRetentionAmount()
    {
        return $this->container['retention_amount'];
    }

    /**
     * Sets retention_amount
     * @param double $retention_amount The invoice retention amount
     * @return $this
     */
    public function setRetentionAmount($retention_amount)
    {
        $this->container['retention_amount'] = $retention_amount;

        return $this;
    }

    /**
     * Gets retention_percentage
     * @return double
     */
    public function getRetentionPercentage()
    {
        return $this->container['retention_percentage'];
    }

    /**
     * Sets retention_percentage
     * @param double $retention_percentage The invoice retention percentage
     * @return $this
     */
    public function setRetentionPercentage($retention_percentage)
    {
        $this->container['retention_percentage'] = $retention_percentage;

        return $this;
    }

    /**
     * Gets total_taxable_amount
     * @return double
     */
    public function getTotalTaxableAmount()
    {
        return $this->container['total_taxable_amount'];
    }

    /**
     * Sets total_taxable_amount
     * @param double $total_taxable_amount Gets the total taxable amount for the invoice (the value returned includes the   addition of the taxable amounts for the several lines). (Spain: Base imponible)
     * @return $this
     */
    public function setTotalTaxableAmount($total_taxable_amount)
    {
        $this->container['total_taxable_amount'] = $total_taxable_amount;

        return $this;
    }

    /**
     * Gets total_vat_amount
     * @return double
     */
    public function getTotalVatAmount()
    {
        return $this->container['total_vat_amount'];
    }

    /**
     * Sets total_vat_amount
     * @param double $total_vat_amount Gets the total VAT amount for the invoice (the value returned includes the   addition of the VAT amounts for the several lines).
     * @return $this
     */
    public function setTotalVatAmount($total_vat_amount)
    {
        $this->container['total_vat_amount'] = $total_vat_amount;

        return $this;
    }

    /**
     * Gets total_amount
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     * @param double $total_amount Gets the total final amount for the invoice (the value returned includes the   addition of the taxable amount plus the VAT amount for every line) less the  retention amount. TotalAmount = BI +IVA - Retencion
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_re_amount
     * @return double
     */
    public function getTotalReAmount()
    {
        return $this->container['total_re_amount'];
    }

    /**
     * Sets total_re_amount
     * @param double $total_re_amount The total RE amount of the invoice
     * @return $this
     */
    public function setTotalReAmount($total_re_amount)
    {
        $this->container['total_re_amount'] = $total_re_amount;

        return $this;
    }

    /**
     * Gets total_payed_amount
     * @return double
     */
    public function getTotalPayedAmount()
    {
        return $this->container['total_payed_amount'];
    }

    /**
     * Sets total_payed_amount
     * @param double $total_payed_amount Returns the amount of money payed.
     * @return $this
     */
    public function setTotalPayedAmount($total_payed_amount)
    {
        $this->container['total_payed_amount'] = $total_payed_amount;

        return $this;
    }

    /**
     * Gets total_amount_per_pay
     * @return double
     */
    public function getTotalAmountPerPay()
    {
        return $this->container['total_amount_per_pay'];
    }

    /**
     * Sets total_amount_per_pay
     * @param double $total_amount_per_pay Returns the pending invoice amount to pay.
     * @return $this
     */
    public function setTotalAmountPerPay($total_amount_per_pay)
    {
        $this->container['total_amount_per_pay'] = $total_amount_per_pay;

        return $this;
    }

    /**
     * Gets total_computable_amount
     * @return double
     */
    public function getTotalComputableAmount()
    {
        return $this->container['total_computable_amount'];
    }

    /**
     * Sets total_computable_amount
     * @param double $total_computable_amount Returns the TotalAmount of the invoice that is Computable.
     * @return $this
     */
    public function setTotalComputableAmount($total_computable_amount)
    {
        $this->container['total_computable_amount'] = $total_computable_amount;

        return $this;
    }

    /**
     * Gets total_computable_amount_for_vat
     * @return double
     */
    public function getTotalComputableAmountForVat()
    {
        return $this->container['total_computable_amount_for_vat'];
    }

    /**
     * Sets total_computable_amount_for_vat
     * @param double $total_computable_amount_for_vat Returns the TotalAmount of the invoice that is Computable for all VAT computations.
     * @return $this
     */
    public function setTotalComputableAmountForVat($total_computable_amount_for_vat)
    {
        $this->container['total_computable_amount_for_vat'] = $total_computable_amount_for_vat;

        return $this;
    }

    /**
     * Gets computable_percentage
     * @return double
     */
    public function getComputablePercentage()
    {
        return $this->container['computable_percentage'];
    }

    /**
     * Sets computable_percentage
     * @param double $computable_percentage Gets or Sets the percentage of the invoice that will be involved in the fiscal computations.      IMPORTANT: This property only makes sense with invoices of type Received.      Issued invoices should always have a ComputablePercentage of 100% because otherwise the invoice       RetentionAmount (which may have already been sent to the administration by the invoice payee)      would not match the computable invoice amount.
     * @return $this
     */
    public function setComputablePercentage($computable_percentage)
    {
        $this->container['computable_percentage'] = $computable_percentage;

        return $this;
    }

    /**
     * Gets computable_percentage_vat
     * @return double
     */
    public function getComputablePercentageVat()
    {
        return $this->container['computable_percentage_vat'];
    }

    /**
     * Sets computable_percentage_vat
     * @param double $computable_percentage_vat Gets or Sets the percentage of the expense that will be involved in the IVA Imputation.
     * @return $this
     */
    public function setComputablePercentageVat($computable_percentage_vat)
    {
        $this->container['computable_percentage_vat'] = $computable_percentage_vat;

        return $this;
    }

    /**
     * Gets invoice_class
     * @return int
     */
    public function getInvoiceClass()
    {
        return $this->container['invoice_class'];
    }

    /**
     * Sets invoice_class
     * @param int $invoice_class The invoice class
     * @return $this
     */
    public function setInvoiceClass($invoice_class)
    {
        $this->container['invoice_class'] = $invoice_class;

        return $this;
    }

    /**
     * Gets operation_type
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     * @param string $operation_type The type of operation
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $allowed_values = array('Nacional', 'NacNoSujeta', 'Intracumunitaria', 'Exportacion', 'Importacion', 'NacionalExenta', 'InversionSujetoPasivo');
        if (!is_null($operation_type) && (!in_array($operation_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'operation_type', must be one of 'Nacional', 'NacNoSujeta', 'Intracumunitaria', 'Exportacion', 'Importacion', 'NacionalExenta', 'InversionSujetoPasivo'");
        }
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets footer
     * @return string
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     * @param string $footer The invoice footer
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets is_cash_criteria
     * @return bool
     */
    public function getIsCashCriteria()
    {
        return $this->container['is_cash_criteria'];
    }

    /**
     * Sets is_cash_criteria
     * @param bool $is_cash_criteria Indicates if the issuer or target of the invoice is subject to \"Regimen de Criterio de Caja\"
     * @return $this
     */
    public function setIsCashCriteria($is_cash_criteria)
    {
        $this->container['is_cash_criteria'] = $is_cash_criteria;

        return $this;
    }

    /**
     * Gets aeat_aproved_file_id
     * @return int
     */
    public function getAeatAprovedFileId()
    {
        return $this->container['aeat_aproved_file_id'];
    }

    /**
     * Sets aeat_aproved_file_id
     * @param int $aeat_aproved_file_id If not NULL contains the identifier of the file that contains the related certified document
     * @return $this
     */
    public function setAeatAprovedFileId($aeat_aproved_file_id)
    {
        $this->container['aeat_aproved_file_id'] = $aeat_aproved_file_id;

        return $this;
    }

    /**
     * Gets has_aeat_aproved_file
     * @return bool
     */
    public function getHasAeatAprovedFile()
    {
        return $this->container['has_aeat_aproved_file'];
    }

    /**
     * Sets has_aeat_aproved_file
     * @param bool $has_aeat_aproved_file Checks if the current invoice has a certified file
     * @return $this
     */
    public function setHasAeatAprovedFile($has_aeat_aproved_file)
    {
        $this->container['has_aeat_aproved_file'] = $has_aeat_aproved_file;

        return $this;
    }

    /**
     * Gets related_estimate_id
     * @return int
     */
    public function getRelatedEstimateId()
    {
        return $this->container['related_estimate_id'];
    }

    /**
     * Sets related_estimate_id
     * @param int $related_estimate_id The identifier of the estimate related to the delivery note (if exists)
     * @return $this
     */
    public function setRelatedEstimateId($related_estimate_id)
    {
        $this->container['related_estimate_id'] = $related_estimate_id;

        return $this;
    }

    /**
     * Gets issuer
     * @return \Contasimple\Swagger\Client\Model\DocumentEntityApiModel
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     * @param \Contasimple\Swagger\Client\Model\DocumentEntityApiModel $issuer The entity issuer. The one who generated the invoice.
     * @return $this
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets target
     * @return \Contasimple\Swagger\Client\Model\DocumentEntityApiModel
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     * @param \Contasimple\Swagger\Client\Model\DocumentEntityApiModel $target The entity target. The receiver of the invoice.
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets lines
     * @return \Contasimple\Swagger\Client\Model\InvoiceLineApiModel[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     * @param \Contasimple\Swagger\Client\Model\InvoiceLineApiModel[] $lines The line objects for the invoice
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets payments
     * @return \Contasimple\Swagger\Client\Model\DocumentPaymentApiModel[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     * @param \Contasimple\Swagger\Client\Model\DocumentPaymentApiModel[] $payments The invoice payments
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * CompanyApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Model;

use \ArrayAccess;

/**
 * CompanyApiModel Class Doc Comment
 *
 * @category    Class */
 // @description Defines the information for a company
/**
 * @package     Contasimple\Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompanyApiModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CompanyApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'domain_id' => 'int',
        'brand_id' => 'int',
        'type' => 'string',
        'activated' => 'int',
        'disabled_by_pending_payment' => 'bool',
        'disabled_by_pending_payment_time' => '\DateTime',
        'comments' => 'string',
        'organization_name' => 'string',
        'nif' => 'string',
        'name' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'email' => 'string',
        'creation_time' => '\DateTime',
        'last_update_time' => '\DateTime',
        'last_access_time' => '\DateTime',
        'expiration_date' => '\DateTime',
        'payment_type' => 'string',
        'country_id' => 'int',
        'country' => '\Contasimple\Swagger\Client\Model\CountryApiModel',
        'fiscal_region_id' => 'int',
        'fiscal_region' => '\Contasimple\Swagger\Client\Model\FiscalRegionApiModel',
        'ui_culture' => 'string',
        'company_type_id' => 'int',
        'vat_type_id' => 'int',
        'vat_type_code' => 'string',
        'irpf_mode_id' => 'int',
        'irpf_mode_code' => 'string',
        'is_default' => 'bool',
        'show_recargo_equivalencia' => 'bool',
        'requires_configuration' => 'bool',
        'display_name' => 'string',
        'person_name' => 'string',
        'extra_information' => '\Contasimple\Swagger\Client\Model\CompanyExtraInformationApiModel'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'domain_id' => 'domainId',
        'brand_id' => 'brandId',
        'type' => 'type',
        'activated' => 'activated',
        'disabled_by_pending_payment' => 'disabledByPendingPayment',
        'disabled_by_pending_payment_time' => 'disabledByPendingPaymentTime',
        'comments' => 'comments',
        'organization_name' => 'organizationName',
        'nif' => 'nif',
        'name' => 'name',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'email' => 'email',
        'creation_time' => 'creationTime',
        'last_update_time' => 'lastUpdateTime',
        'last_access_time' => 'lastAccessTime',
        'expiration_date' => 'expirationDate',
        'payment_type' => 'paymentType',
        'country_id' => 'countryId',
        'country' => 'country',
        'fiscal_region_id' => 'fiscalRegionId',
        'fiscal_region' => 'fiscalRegion',
        'ui_culture' => 'uiCulture',
        'company_type_id' => 'companyTypeId',
        'vat_type_id' => 'vatTypeId',
        'vat_type_code' => 'vatTypeCode',
        'irpf_mode_id' => 'irpfModeId',
        'irpf_mode_code' => 'irpfModeCode',
        'is_default' => 'isDefault',
        'show_recargo_equivalencia' => 'showRecargoEquivalencia',
        'requires_configuration' => 'requiresConfiguration',
        'display_name' => 'displayName',
        'person_name' => 'personName',
        'extra_information' => 'extraInformation'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'domain_id' => 'setDomainId',
        'brand_id' => 'setBrandId',
        'type' => 'setType',
        'activated' => 'setActivated',
        'disabled_by_pending_payment' => 'setDisabledByPendingPayment',
        'disabled_by_pending_payment_time' => 'setDisabledByPendingPaymentTime',
        'comments' => 'setComments',
        'organization_name' => 'setOrganizationName',
        'nif' => 'setNif',
        'name' => 'setName',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'email' => 'setEmail',
        'creation_time' => 'setCreationTime',
        'last_update_time' => 'setLastUpdateTime',
        'last_access_time' => 'setLastAccessTime',
        'expiration_date' => 'setExpirationDate',
        'payment_type' => 'setPaymentType',
        'country_id' => 'setCountryId',
        'country' => 'setCountry',
        'fiscal_region_id' => 'setFiscalRegionId',
        'fiscal_region' => 'setFiscalRegion',
        'ui_culture' => 'setUiCulture',
        'company_type_id' => 'setCompanyTypeId',
        'vat_type_id' => 'setVatTypeId',
        'vat_type_code' => 'setVatTypeCode',
        'irpf_mode_id' => 'setIrpfModeId',
        'irpf_mode_code' => 'setIrpfModeCode',
        'is_default' => 'setIsDefault',
        'show_recargo_equivalencia' => 'setShowRecargoEquivalencia',
        'requires_configuration' => 'setRequiresConfiguration',
        'display_name' => 'setDisplayName',
        'person_name' => 'setPersonName',
        'extra_information' => 'setExtraInformation'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'domain_id' => 'getDomainId',
        'brand_id' => 'getBrandId',
        'type' => 'getType',
        'activated' => 'getActivated',
        'disabled_by_pending_payment' => 'getDisabledByPendingPayment',
        'disabled_by_pending_payment_time' => 'getDisabledByPendingPaymentTime',
        'comments' => 'getComments',
        'organization_name' => 'getOrganizationName',
        'nif' => 'getNif',
        'name' => 'getName',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'email' => 'getEmail',
        'creation_time' => 'getCreationTime',
        'last_update_time' => 'getLastUpdateTime',
        'last_access_time' => 'getLastAccessTime',
        'expiration_date' => 'getExpirationDate',
        'payment_type' => 'getPaymentType',
        'country_id' => 'getCountryId',
        'country' => 'getCountry',
        'fiscal_region_id' => 'getFiscalRegionId',
        'fiscal_region' => 'getFiscalRegion',
        'ui_culture' => 'getUiCulture',
        'company_type_id' => 'getCompanyTypeId',
        'vat_type_id' => 'getVatTypeId',
        'vat_type_code' => 'getVatTypeCode',
        'irpf_mode_id' => 'getIrpfModeId',
        'irpf_mode_code' => 'getIrpfModeCode',
        'is_default' => 'getIsDefault',
        'show_recargo_equivalencia' => 'getShowRecargoEquivalencia',
        'requires_configuration' => 'getRequiresConfiguration',
        'display_name' => 'getDisplayName',
        'person_name' => 'getPersonName',
        'extra_information' => 'getExtraInformation'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_BASICO = 'Basico';
    const TYPE_PROFESIONAL = 'Profesional';
    const TYPE_ULTIMATE = 'Ultimate';
    const PAYMENT_TYPE_NONE = 'None';
    const PAYMENT_TYPE_PASARELA = 'Pasarela';
    const PAYMENT_TYPE_DOMICILIACION = 'Domiciliacion';
    const PAYMENT_TYPE_EXTERNAL = 'External';
    const PAYMENT_TYPE_TARJETA_CREDITO = 'TarjetaCredito';
    const PAYMENT_TYPE_PAYPAL = 'Paypal';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BASICO,
            self::TYPE_PROFESIONAL,
            self::TYPE_ULTIMATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_NONE,
            self::PAYMENT_TYPE_PASARELA,
            self::PAYMENT_TYPE_DOMICILIACION,
            self::PAYMENT_TYPE_EXTERNAL,
            self::PAYMENT_TYPE_TARJETA_CREDITO,
            self::PAYMENT_TYPE_PAYPAL,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['domain_id'] = isset($data['domain_id']) ? $data['domain_id'] : null;
        $this->container['brand_id'] = isset($data['brand_id']) ? $data['brand_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['activated'] = isset($data['activated']) ? $data['activated'] : null;
        $this->container['disabled_by_pending_payment'] = isset($data['disabled_by_pending_payment']) ? $data['disabled_by_pending_payment'] : null;
        $this->container['disabled_by_pending_payment_time'] = isset($data['disabled_by_pending_payment_time']) ? $data['disabled_by_pending_payment_time'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['organization_name'] = isset($data['organization_name']) ? $data['organization_name'] : null;
        $this->container['nif'] = isset($data['nif']) ? $data['nif'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['last_update_time'] = isset($data['last_update_time']) ? $data['last_update_time'] : null;
        $this->container['last_access_time'] = isset($data['last_access_time']) ? $data['last_access_time'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['fiscal_region_id'] = isset($data['fiscal_region_id']) ? $data['fiscal_region_id'] : null;
        $this->container['fiscal_region'] = isset($data['fiscal_region']) ? $data['fiscal_region'] : null;
        $this->container['ui_culture'] = isset($data['ui_culture']) ? $data['ui_culture'] : null;
        $this->container['company_type_id'] = isset($data['company_type_id']) ? $data['company_type_id'] : null;
        $this->container['vat_type_id'] = isset($data['vat_type_id']) ? $data['vat_type_id'] : null;
        $this->container['vat_type_code'] = isset($data['vat_type_code']) ? $data['vat_type_code'] : null;
        $this->container['irpf_mode_id'] = isset($data['irpf_mode_id']) ? $data['irpf_mode_id'] : null;
        $this->container['irpf_mode_code'] = isset($data['irpf_mode_code']) ? $data['irpf_mode_code'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['show_recargo_equivalencia'] = isset($data['show_recargo_equivalencia']) ? $data['show_recargo_equivalencia'] : null;
        $this->container['requires_configuration'] = isset($data['requires_configuration']) ? $data['requires_configuration'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['person_name'] = isset($data['person_name']) ? $data['person_name'] : null;
        $this->container['extra_information'] = isset($data['extra_information']) ? $data['extra_information'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["Basico", "Profesional", "Ultimate"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["None", "Pasarela", "Domiciliacion", "External", "TarjetaCredito", "Paypal"];
        if (!in_array($this->container['payment_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'payment_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["Basico", "Profesional", "Ultimate"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["None", "Pasarela", "Domiciliacion", "External", "TarjetaCredito", "Paypal"];
        if (!in_array($this->container['payment_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The unique identifier of the company
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets domain_id
     * @return int
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     * @param int $domain_id The ID of the domain where the company resides
     * @return $this
     */
    public function setDomainId($domain_id)
    {
        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets brand_id
     * @return int
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     * @param int $brand_id The ID of the brand where the company was registered
     * @return $this
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The current plan of the company
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('Basico', 'Profesional', 'Ultimate');
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'Basico', 'Profesional', 'Ultimate'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets activated
     * @return int
     */
    public function getActivated()
    {
        return $this->container['activated'];
    }

    /**
     * Sets activated
     * @param int $activated Indicates if the company is active
     * @return $this
     */
    public function setActivated($activated)
    {
        $this->container['activated'] = $activated;

        return $this;
    }

    /**
     * Gets disabled_by_pending_payment
     * @return bool
     */
    public function getDisabledByPendingPayment()
    {
        return $this->container['disabled_by_pending_payment'];
    }

    /**
     * Sets disabled_by_pending_payment
     * @param bool $disabled_by_pending_payment Gets or Sets whether the user is deactivated for having a pending payment.
     * @return $this
     */
    public function setDisabledByPendingPayment($disabled_by_pending_payment)
    {
        $this->container['disabled_by_pending_payment'] = $disabled_by_pending_payment;

        return $this;
    }

    /**
     * Gets disabled_by_pending_payment_time
     * @return \DateTime
     */
    public function getDisabledByPendingPaymentTime()
    {
        return $this->container['disabled_by_pending_payment_time'];
    }

    /**
     * Sets disabled_by_pending_payment_time
     * @param \DateTime $disabled_by_pending_payment_time Gets or Sets the time when the user go deactivated for having a pending payment.
     * @return $this
     */
    public function setDisabledByPendingPaymentTime($disabled_by_pending_payment_time)
    {
        $this->container['disabled_by_pending_payment_time'] = $disabled_by_pending_payment_time;

        return $this;
    }

    /**
     * Gets comments
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     * @param string $comments Free field to insert comments about the company
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets organization_name
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     * @param string $organization_name Indicates the name of the company
     * @return $this
     */
    public function setOrganizationName($organization_name)
    {
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets nif
     * @return string
     */
    public function getNif()
    {
        return $this->container['nif'];
    }

    /**
     * Sets nif
     * @param string $nif Indicates the NIF of the company
     * @return $this
     */
    public function setNif($nif)
    {
        $this->container['nif'] = $nif;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Indicates the name of the user (as individual company)
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets firstname
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     * @param string $firstname Indicates the firstname of the user (as individual company)
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     * @param string $lastname Indicates the lastname of the user (as individual company)
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Indicates the email address to contact the company
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets creation_time
     * @return \DateTime
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     * @param \DateTime $creation_time Indicates the user creation time
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets last_update_time
     * @return \DateTime
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     * @param \DateTime $last_update_time Indicates the last time that user information was updated
     * @return $this
     */
    public function setLastUpdateTime($last_update_time)
    {
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets last_access_time
     * @return \DateTime
     */
    public function getLastAccessTime()
    {
        return $this->container['last_access_time'];
    }

    /**
     * Sets last_access_time
     * @param \DateTime $last_access_time Indicates the last access time that the user accessed the platform
     * @return $this
     */
    public function setLastAccessTime($last_access_time)
    {
        $this->container['last_access_time'] = $last_access_time;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param \DateTime $expiration_date The company current plan expiration date
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets payment_type
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     * @param string $payment_type The user current payment type
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowed_values = array('None', 'Pasarela', 'Domiciliacion', 'External', 'TarjetaCredito', 'Paypal');
        if (!is_null($payment_type) && (!in_array($payment_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'payment_type', must be one of 'None', 'Pasarela', 'Domiciliacion', 'External', 'TarjetaCredito', 'Paypal'");
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets country_id
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     * @param int $country_id The country identifier of the company
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets country
     * @return \Contasimple\Swagger\Client\Model\CountryApiModel
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param \Contasimple\Swagger\Client\Model\CountryApiModel $country The country of the company
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets fiscal_region_id
     * @return int
     */
    public function getFiscalRegionId()
    {
        return $this->container['fiscal_region_id'];
    }

    /**
     * Sets fiscal_region_id
     * @param int $fiscal_region_id The fiscal region identifier of the company
     * @return $this
     */
    public function setFiscalRegionId($fiscal_region_id)
    {
        $this->container['fiscal_region_id'] = $fiscal_region_id;

        return $this;
    }

    /**
     * Gets fiscal_region
     * @return \Contasimple\Swagger\Client\Model\FiscalRegionApiModel
     */
    public function getFiscalRegion()
    {
        return $this->container['fiscal_region'];
    }

    /**
     * Sets fiscal_region
     * @param \Contasimple\Swagger\Client\Model\FiscalRegionApiModel $fiscal_region The fiscal region of the company
     * @return $this
     */
    public function setFiscalRegion($fiscal_region)
    {
        $this->container['fiscal_region'] = $fiscal_region;

        return $this;
    }

    /**
     * Gets ui_culture
     * @return string
     */
    public function getUiCulture()
    {
        return $this->container['ui_culture'];
    }

    /**
     * Sets ui_culture
     * @param string $ui_culture The UI culture of the company
     * @return $this
     */
    public function setUiCulture($ui_culture)
    {
        $this->container['ui_culture'] = $ui_culture;

        return $this;
    }

    /**
     * Gets company_type_id
     * @return int
     */
    public function getCompanyTypeId()
    {
        return $this->container['company_type_id'];
    }

    /**
     * Sets company_type_id
     * @param int $company_type_id The identifier of the company type
     * @return $this
     */
    public function setCompanyTypeId($company_type_id)
    {
        $this->container['company_type_id'] = $company_type_id;

        return $this;
    }

    /**
     * Gets vat_type_id
     * @return int
     */
    public function getVatTypeId()
    {
        return $this->container['vat_type_id'];
    }

    /**
     * Sets vat_type_id
     * @param int $vat_type_id The VAT type identifier
     * @return $this
     */
    public function setVatTypeId($vat_type_id)
    {
        $this->container['vat_type_id'] = $vat_type_id;

        return $this;
    }

    /**
     * Gets vat_type_code
     * @return string
     */
    public function getVatTypeCode()
    {
        return $this->container['vat_type_code'];
    }

    /**
     * Sets vat_type_code
     * @param string $vat_type_code The code of the VAT mode
     * @return $this
     */
    public function setVatTypeCode($vat_type_code)
    {
        $this->container['vat_type_code'] = $vat_type_code;

        return $this;
    }

    /**
     * Gets irpf_mode_id
     * @return int
     */
    public function getIrpfModeId()
    {
        return $this->container['irpf_mode_id'];
    }

    /**
     * Sets irpf_mode_id
     * @param int $irpf_mode_id The IRPF estimation identifier for the company
     * @return $this
     */
    public function setIrpfModeId($irpf_mode_id)
    {
        $this->container['irpf_mode_id'] = $irpf_mode_id;

        return $this;
    }

    /**
     * Gets irpf_mode_code
     * @return string
     */
    public function getIrpfModeCode()
    {
        return $this->container['irpf_mode_code'];
    }

    /**
     * Sets irpf_mode_code
     * @param string $irpf_mode_code The IRPF estimation code for the company
     * @return $this
     */
    public function setIrpfModeCode($irpf_mode_code)
    {
        $this->container['irpf_mode_code'] = $irpf_mode_code;

        return $this;
    }

    /**
     * Gets is_default
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     * @param bool $is_default Indicates that the current company is the user default company
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets show_recargo_equivalencia
     * @return bool
     */
    public function getShowRecargoEquivalencia()
    {
        return $this->container['show_recargo_equivalencia'];
    }

    /**
     * Sets show_recargo_equivalencia
     * @param bool $show_recargo_equivalencia Indicates if the company needs to show the RE option
     * @return $this
     */
    public function setShowRecargoEquivalencia($show_recargo_equivalencia)
    {
        $this->container['show_recargo_equivalencia'] = $show_recargo_equivalencia;

        return $this;
    }

    /**
     * Gets requires_configuration
     * @return bool
     */
    public function getRequiresConfiguration()
    {
        return $this->container['requires_configuration'];
    }

    /**
     * Sets requires_configuration
     * @param bool $requires_configuration Indicates that the company requires to be configured (equivalent to web initial setup)
     * @return $this
     */
    public function setRequiresConfiguration($requires_configuration)
    {
        $this->container['requires_configuration'] = $requires_configuration;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name Gets the name to appear on the screen for the company
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets person_name
     * @return string
     */
    public function getPersonName()
    {
        return $this->container['person_name'];
    }

    /**
     * Sets person_name
     * @param string $person_name Builds the name of the organization as a single person
     * @return $this
     */
    public function setPersonName($person_name)
    {
        $this->container['person_name'] = $person_name;

        return $this;
    }

    /**
     * Gets extra_information
     * @return \Contasimple\Swagger\Client\Model\CompanyExtraInformationApiModel
     */
    public function getExtraInformation()
    {
        return $this->container['extra_information'];
    }

    /**
     * Sets extra_information
     * @param \Contasimple\Swagger\Client\Model\CompanyExtraInformationApiModel $extra_information Contains the extra information for the current company
     * @return $this
     */
    public function setExtraInformation($extra_information)
    {
        $this->container['extra_information'] = $extra_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * TreasuryAccountApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Model;

use \ArrayAccess;

/**
 * TreasuryAccountApiModel Class Doc Comment
 *
 * @category    Class
 * @description Defines the information about a treasury account
 * @package     Contasimple\Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TreasuryAccountApiModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TreasuryAccountApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'type' => 'string',
        'name' => 'string',
        'number' => 'string',
        'is_enabled' => 'bool',
        'entity_type' => 'string',
        'entity_name' => 'string',
        'automatic_synchronization_enabled' => 'bool',
        'balance' => 'double',
        'last_movement_time' => '\DateTime',
        'last_synchronization_time' => '\DateTime',
        'next_synchronization_from_time' => '\DateTime',
        'related_payment_methods' => '\Contasimple\Swagger\Client\Model\PaymentMethodApiModel[]',
        'api_service' => 'string',
        'related_product_id' => 'string',
        'has_automatic_synchronization_credentials' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'type' => null,
        'name' => null,
        'number' => null,
        'is_enabled' => null,
        'entity_type' => null,
        'entity_name' => null,
        'automatic_synchronization_enabled' => null,
        'balance' => 'double',
        'last_movement_time' => 'date-time',
        'last_synchronization_time' => 'date-time',
        'next_synchronization_from_time' => 'date-time',
        'related_payment_methods' => null,
        'api_service' => null,
        'related_product_id' => null,
        'has_automatic_synchronization_credentials' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'name' => 'name',
        'number' => 'number',
        'is_enabled' => 'isEnabled',
        'entity_type' => 'entityType',
        'entity_name' => 'entityName',
        'automatic_synchronization_enabled' => 'automaticSynchronizationEnabled',
        'balance' => 'balance',
        'last_movement_time' => 'lastMovementTime',
        'last_synchronization_time' => 'lastSynchronizationTime',
        'next_synchronization_from_time' => 'nextSynchronizationFromTime',
        'related_payment_methods' => 'relatedPaymentMethods',
        'api_service' => 'apiService',
        'related_product_id' => 'relatedProductId',
        'has_automatic_synchronization_credentials' => 'hasAutomaticSynchronizationCredentials'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'name' => 'setName',
        'number' => 'setNumber',
        'is_enabled' => 'setIsEnabled',
        'entity_type' => 'setEntityType',
        'entity_name' => 'setEntityName',
        'automatic_synchronization_enabled' => 'setAutomaticSynchronizationEnabled',
        'balance' => 'setBalance',
        'last_movement_time' => 'setLastMovementTime',
        'last_synchronization_time' => 'setLastSynchronizationTime',
        'next_synchronization_from_time' => 'setNextSynchronizationFromTime',
        'related_payment_methods' => 'setRelatedPaymentMethods',
        'api_service' => 'setApiService',
        'related_product_id' => 'setRelatedProductId',
        'has_automatic_synchronization_credentials' => 'setHasAutomaticSynchronizationCredentials'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'name' => 'getName',
        'number' => 'getNumber',
        'is_enabled' => 'getIsEnabled',
        'entity_type' => 'getEntityType',
        'entity_name' => 'getEntityName',
        'automatic_synchronization_enabled' => 'getAutomaticSynchronizationEnabled',
        'balance' => 'getBalance',
        'last_movement_time' => 'getLastMovementTime',
        'last_synchronization_time' => 'getLastSynchronizationTime',
        'next_synchronization_from_time' => 'getNextSynchronizationFromTime',
        'related_payment_methods' => 'getRelatedPaymentMethods',
        'api_service' => 'getApiService',
        'related_product_id' => 'getRelatedProductId',
        'has_automatic_synchronization_credentials' => 'getHasAutomaticSynchronizationCredentials'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_CASH = 'Cash';
    const TYPE_PAYPAL = 'Paypal';
    const TYPE_CREDIT_CARD = 'CreditCard';
    const TYPE_BANK = 'Bank';
    const ENTITY_TYPE_GENERIC = 'Generic';
    const ENTITY_TYPE_N26 = 'N26';
    const ENTITY_TYPE_ABANCA = 'Abanca';
    const ENTITY_TYPE_ABCCAPITAL = 'Abccapital';
    const ENTITY_TYPE_ACCENDO = 'Accendo';
    const ENTITY_TYPE_ACTINVER = 'Actinver';
    const ENTITY_TYPE_ACTIVOBANK = 'Activobank';
    const ENTITY_TYPE_AFIRME = 'Afirme';
    const ENTITY_TYPE_AGRICOLE_IT = 'Agricole_it';
    const ENTITY_TYPE_AMEX = 'Amex';
    const ENTITY_TYPE_AMRO_NE = 'Amro_ne';
    const ENTITY_TYPE_ANDBANK = 'Andbank';
    const ENTITY_TYPE_ARQUIA = 'Arquia';
    const ENTITY_TYPE_AZTECA_MX = 'Azteca_mx';
    const ENTITY_TYPE_B_DE_BOGOTA_CO = 'B_de_bogota_co';
    const ENTITY_TYPE_B_DO_BRASIL_BR = 'B_do_brasil_br';
    const ENTITY_TYPE_BAM = 'Bam';
    const ENTITY_TYPE_BANAMEX = 'Banamex';
    const ENTITY_TYPE_BANBAJIO_MX = 'Banbajio_mx';
    const ENTITY_TYPE_BANCAMARCH = 'Bancamarch';
    const ENTITY_TYPE_BANCAPUEYO = 'Bancapueyo';
    const ENTITY_TYPE_BANCASELLA_IT = 'Bancasella_it';
    const ENTITY_TYPE_BANCO_NACION_AR = 'Banco_nacion_ar';
    const ENTITY_TYPE_BANCOBASE = 'Bancobase';
    const ENTITY_TYPE_BANCOBICE = 'Bancobice';
    const ENTITY_TYPE_BANCOCAMINOS = 'Bancocaminos';
    const ENTITY_TYPE_BANCOCIUDAD_AR = 'Bancociudad_ar';
    const ENTITY_TYPE_BANCODECHILE = 'Bancodechile';
    const ENTITY_TYPE_BANCOESTADO = 'Bancoestado';
    const ENTITY_TYPE_BANCOFAMSA = 'Bancofamsa';
    const ENTITY_TYPE_BANCOFAR = 'Bancofar';
    const ENTITY_TYPE_BANCOGALICIA_AR = 'Bancogalicia_ar';
    const ENTITY_TYPE_BANCOHIPOTECARIO_AR = 'Bancohipotecario_ar';
    const ENTITY_TYPE_BANCOLOMBIA_CO = 'Bancolombia_co';
    const ENTITY_TYPE_BANCOPATAGONIA_AR = 'Bancopatagonia_ar';
    const ENTITY_TYPE_BANCOPOSTA_IT = 'Bancoposta_it';
    const ENTITY_TYPE_BANCOPPEL_MX = 'Bancoppel_mx';
    const ENTITY_TYPE_BANCOPROVINCIA_AR = 'Bancoprovincia_ar';
    const ENTITY_TYPE_BANCOS3 = 'Bancos3';
    const ENTITY_TYPE_BANCREA = 'Bancrea';
    const ENTITY_TYPE_BANKAOOL = 'Bankaool';
    const ENTITY_TYPE_BANKIA = 'Bankia';
    const ENTITY_TYPE_BANKINTER = 'Bankinter';
    const ENTITY_TYPE_BANKOA = 'Bankoa';
    const ENTITY_TYPE_BANKOFAMERICA = 'Bankofamerica';
    const ENTITY_TYPE_BANKOFCHINA = 'Bankofchina';
    const ENTITY_TYPE_BANORTE_EMP_MX = 'Banorte_emp_mx';
    const ENTITY_TYPE_BANREGIO_EMP_MX = 'Banregio_emp_mx';
    const ENTITY_TYPE_BANSI = 'Bansi';
    const ENTITY_TYPE_BARCLAYS = 'Barclays';
    const ENTITY_TYPE_BBVA = 'Bbva';
    const ENTITY_TYPE_BES = 'Bes';
    const ENTITY_TYPE_BFS = 'Bfs';
    const ENTITY_TYPE_BNDES_BR = 'Bndes_br';
    const ENTITY_TYPE_BNEXT = 'Bnext';
    const ENTITY_TYPE_BNPPARIBAS_BE = 'Bnpparibas_be';
    const ENTITY_TYPE_BPER_IT = 'Bper_it';
    const ENTITY_TYPE_BRA_IT = 'Bra_it';
    const ENTITY_TYPE_BRADESCO = 'Bradesco';
    const ENTITY_TYPE_CA_BMO = 'Ca_bmo';
    const ENTITY_TYPE_CAIXA = 'Caixa';
    const ENTITY_TYPE_CAIXA_BR = 'Caixa_br';
    const ENTITY_TYPE_CAIXA_CONSUMERFINANCE = 'Caixa_consumerfinance';
    const ENTITY_TYPE_CAIXACALLOSA = 'Caixacallosa';
    const ENTITY_TYPE_CAIXADIRECTA_PT = 'Caixadirecta_pt';
    const ENTITY_TYPE_CAIXAGERAL_EMP = 'Caixageral_emp';
    const ENTITY_TYPE_CAIXAONTINYENT = 'Caixaontinyent';
    const ENTITY_TYPE_CAJAALMENDRALEJO = 'Cajaalmendralejo';
    const ENTITY_TYPE_CAJAINGENIEROS = 'Cajaingenieros';
    const ENTITY_TYPE_CAJALABORAL = 'Cajalaboral';
    const ENTITY_TYPE_CAJASUR = 'Cajasur';
    const ENTITY_TYPE_CARREFOUR = 'Carrefour';
    const ENTITY_TYPE_CCM = 'Ccm';
    const ENTITY_TYPE_CEPSA = 'Cepsa';
    const ENTITY_TYPE_CHEBANCA_IT = 'Chebanca_it';
    const ENTITY_TYPE_CIBANCO = 'Cibanco';
    const ENTITY_TYPE_COINC = 'Coinc';
    const ENTITY_TYPE_COLONYA = 'Colonya';
    const ENTITY_TYPE_COMPARTAMOS = 'Compartamos';
    const ENTITY_TYPE_CONSUBANCO = 'Consubanco';
    const ENTITY_TYPE_CORPBANCA = 'Corpbanca';
    const ENTITY_TYPE_CREDICOOP_AR = 'Credicoop_ar';
    const ENTITY_TYPE_CREDITSUISSE = 'Creditsuisse';
    const ENTITY_TYPE_CUENTAFACTO = 'Cuentafacto';
    const ENTITY_TYPE_DAVIVIENDA_CO = 'Davivienda_co';
    const ENTITY_TYPE_DEUTSCHEBANK = 'Deutschebank';
    const ENTITY_TYPE_DONDEBANCO = 'Dondebanco';
    const ENTITY_TYPE_EDENRED = 'Edenred';
    const ENTITY_TYPE_EUROCAJARURAL = 'Eurocajarural';
    const ENTITY_TYPE_EVOBANCO = 'Evobanco';
    const ENTITY_TYPE_FINTERRA = 'Finterra';
    const ENTITY_TYPE_FINTRO_BE = 'Fintro_be';
    const ENTITY_TYPE_FORJADORES = 'Forjadores';
    const ENTITY_TYPE_HELLOBANK_BE = 'Hellobank_be';
    const ENTITY_TYPE_HSBC_AR = 'Hsbc_ar';
    const ENTITY_TYPE_IBERCAJA = 'Ibercaja';
    const ENTITY_TYPE_IBERIACARDS = 'Iberiacards';
    const ENTITY_TYPE_ICBC_AR = 'Icbc_ar';
    const ENTITY_TYPE_IMAGINBANK = 'Imaginbank';
    const ENTITY_TYPE_INBURSA_MX = 'Inbursa_mx';
    const ENTITY_TYPE_INGDIRECT = 'Ingdirect';
    const ENTITY_TYPE_INMOBILIARIOMEXICANO = 'Inmobiliariomexicano';
    const ENTITY_TYPE_INTERCAM = 'Intercam';
    const ENTITY_TYPE_INVERSIS = 'Inversis';
    const ENTITY_TYPE_INVEX = 'Invex';
    const ENTITY_TYPE_ITAU_BR = 'Itau_br';
    const ENTITY_TYPE_JPMORGAN = 'Jpmorgan';
    const ENTITY_TYPE_KUTXABANK = 'Kutxabank';
    const ENTITY_TYPE_LIBERBANK = 'Liberbank';
    const ENTITY_TYPE_MACRO_AR = 'Macro_ar';
    const ENTITY_TYPE_MASTERCARD = 'Mastercard';
    const ENTITY_TYPE_MEDIOLANUM = 'Mediolanum';
    const ENTITY_TYPE_MERCADOPAGO_AR = 'Mercadopago_ar';
    const ENTITY_TYPE_MIFEL = 'Mifel';
    const ENTITY_TYPE_MILLENNIUMBCP = 'Millenniumbcp';
    const ENTITY_TYPE_MIZUHO = 'Mizuho';
    const ENTITY_TYPE_MONEX = 'Monex';
    const ENTITY_TYPE_MUFG = 'Mufg';
    const ENTITY_TYPE_MULTIVA = 'Multiva';
    const ENTITY_TYPE_NORDEA_FI = 'Nordea_fi';
    const ENTITY_TYPE_ONEY = 'Oney';
    const ENTITY_TYPE_OPENBANK = 'Openbank';
    const ENTITY_TYPE_PAGATODO = 'Pagatodo';
    const ENTITY_TYPE_PASCHIDISIENA_IT = 'Paschidisiena_it';
    const ENTITY_TYPE_PIBANK = 'Pibank';
    const ENTITY_TYPE_PICHINCHA = 'Pichincha';
    const ENTITY_TYPE_QONTO = 'Qonto';
    const ENTITY_TYPE_RABOBANK_NL = 'Rabobank_nl';
    const ENTITY_TYPE_REDSYS = 'Redsys';
    const ENTITY_TYPE_RENTA4 = 'Renta4';
    const ENTITY_TYPE_RIPLEY = 'Ripley';
    const ENTITY_TYPE_RURALVIA = 'Ruralvia';
    const ENTITY_TYPE_SABADELL = 'Sabadell';
    const ENTITY_TYPE_SALUZZO_IT = 'Saluzzo_it';
    const ENTITY_TYPE_SANPAOLO_IT = 'Sanpaolo_it';
    const ENTITY_TYPE_SANTANDER_PRIV = 'Santander_priv';
    const ENTITY_TYPE_SANTANDER = 'Santander';
    const ENTITY_TYPE_SARDEGNA_IT = 'Sardegna_it';
    const ENTITY_TYPE_SCOTIABANK_MX = 'Scotiabank_mx';
    const ENTITY_TYPE_SELFBANK = 'Selfbank';
    const ENTITY_TYPE_SHINHANBANK = 'Shinhanbank';
    const ENTITY_TYPE_SOLRED = 'Solred';
    const ENTITY_TYPE_SUPERVIELLE_AR = 'Supervielle_ar';
    const ENTITY_TYPE_TARGOBANK = 'Targobank';
    const ENTITY_TYPE_TRIODOS = 'Triodos';
    const ENTITY_TYPE_UBIBANCA_IT = 'Ubibanca_it';
    const ENTITY_TYPE_UNICAJA = 'Unicaja';
    const ENTITY_TYPE_VEPORMAS = 'Vepormas';
    const ENTITY_TYPE_VOLKSWAGENBANK_MX = 'Volkswagenbank_mx';
    const ENTITY_TYPE_WILOBANK = 'Wilobank';
    const ENTITY_TYPE_WIZINK = 'Wizink';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CASH,
            self::TYPE_PAYPAL,
            self::TYPE_CREDIT_CARD,
            self::TYPE_BANK,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE_GENERIC,
            self::ENTITY_TYPE_N26,
            self::ENTITY_TYPE_ABANCA,
            self::ENTITY_TYPE_ABCCAPITAL,
            self::ENTITY_TYPE_ACCENDO,
            self::ENTITY_TYPE_ACTINVER,
            self::ENTITY_TYPE_ACTIVOBANK,
            self::ENTITY_TYPE_AFIRME,
            self::ENTITY_TYPE_AGRICOLE_IT,
            self::ENTITY_TYPE_AMEX,
            self::ENTITY_TYPE_AMRO_NE,
            self::ENTITY_TYPE_ANDBANK,
            self::ENTITY_TYPE_ARQUIA,
            self::ENTITY_TYPE_AZTECA_MX,
            self::ENTITY_TYPE_B_DE_BOGOTA_CO,
            self::ENTITY_TYPE_B_DO_BRASIL_BR,
            self::ENTITY_TYPE_BAM,
            self::ENTITY_TYPE_BANAMEX,
            self::ENTITY_TYPE_BANBAJIO_MX,
            self::ENTITY_TYPE_BANCAMARCH,
            self::ENTITY_TYPE_BANCAPUEYO,
            self::ENTITY_TYPE_BANCASELLA_IT,
            self::ENTITY_TYPE_BANCO_NACION_AR,
            self::ENTITY_TYPE_BANCOBASE,
            self::ENTITY_TYPE_BANCOBICE,
            self::ENTITY_TYPE_BANCOCAMINOS,
            self::ENTITY_TYPE_BANCOCIUDAD_AR,
            self::ENTITY_TYPE_BANCODECHILE,
            self::ENTITY_TYPE_BANCOESTADO,
            self::ENTITY_TYPE_BANCOFAMSA,
            self::ENTITY_TYPE_BANCOFAR,
            self::ENTITY_TYPE_BANCOGALICIA_AR,
            self::ENTITY_TYPE_BANCOHIPOTECARIO_AR,
            self::ENTITY_TYPE_BANCOLOMBIA_CO,
            self::ENTITY_TYPE_BANCOPATAGONIA_AR,
            self::ENTITY_TYPE_BANCOPOSTA_IT,
            self::ENTITY_TYPE_BANCOPPEL_MX,
            self::ENTITY_TYPE_BANCOPROVINCIA_AR,
            self::ENTITY_TYPE_BANCOS3,
            self::ENTITY_TYPE_BANCREA,
            self::ENTITY_TYPE_BANKAOOL,
            self::ENTITY_TYPE_BANKIA,
            self::ENTITY_TYPE_BANKINTER,
            self::ENTITY_TYPE_BANKOA,
            self::ENTITY_TYPE_BANKOFAMERICA,
            self::ENTITY_TYPE_BANKOFCHINA,
            self::ENTITY_TYPE_BANORTE_EMP_MX,
            self::ENTITY_TYPE_BANREGIO_EMP_MX,
            self::ENTITY_TYPE_BANSI,
            self::ENTITY_TYPE_BARCLAYS,
            self::ENTITY_TYPE_BBVA,
            self::ENTITY_TYPE_BES,
            self::ENTITY_TYPE_BFS,
            self::ENTITY_TYPE_BNDES_BR,
            self::ENTITY_TYPE_BNEXT,
            self::ENTITY_TYPE_BNPPARIBAS_BE,
            self::ENTITY_TYPE_BPER_IT,
            self::ENTITY_TYPE_BRA_IT,
            self::ENTITY_TYPE_BRADESCO,
            self::ENTITY_TYPE_CA_BMO,
            self::ENTITY_TYPE_CAIXA,
            self::ENTITY_TYPE_CAIXA_BR,
            self::ENTITY_TYPE_CAIXA_CONSUMERFINANCE,
            self::ENTITY_TYPE_CAIXACALLOSA,
            self::ENTITY_TYPE_CAIXADIRECTA_PT,
            self::ENTITY_TYPE_CAIXAGERAL_EMP,
            self::ENTITY_TYPE_CAIXAONTINYENT,
            self::ENTITY_TYPE_CAJAALMENDRALEJO,
            self::ENTITY_TYPE_CAJAINGENIEROS,
            self::ENTITY_TYPE_CAJALABORAL,
            self::ENTITY_TYPE_CAJASUR,
            self::ENTITY_TYPE_CARREFOUR,
            self::ENTITY_TYPE_CCM,
            self::ENTITY_TYPE_CEPSA,
            self::ENTITY_TYPE_CHEBANCA_IT,
            self::ENTITY_TYPE_CIBANCO,
            self::ENTITY_TYPE_COINC,
            self::ENTITY_TYPE_COLONYA,
            self::ENTITY_TYPE_COMPARTAMOS,
            self::ENTITY_TYPE_CONSUBANCO,
            self::ENTITY_TYPE_CORPBANCA,
            self::ENTITY_TYPE_CREDICOOP_AR,
            self::ENTITY_TYPE_CREDITSUISSE,
            self::ENTITY_TYPE_CUENTAFACTO,
            self::ENTITY_TYPE_DAVIVIENDA_CO,
            self::ENTITY_TYPE_DEUTSCHEBANK,
            self::ENTITY_TYPE_DONDEBANCO,
            self::ENTITY_TYPE_EDENRED,
            self::ENTITY_TYPE_EUROCAJARURAL,
            self::ENTITY_TYPE_EVOBANCO,
            self::ENTITY_TYPE_FINTERRA,
            self::ENTITY_TYPE_FINTRO_BE,
            self::ENTITY_TYPE_FORJADORES,
            self::ENTITY_TYPE_HELLOBANK_BE,
            self::ENTITY_TYPE_HSBC_AR,
            self::ENTITY_TYPE_IBERCAJA,
            self::ENTITY_TYPE_IBERIACARDS,
            self::ENTITY_TYPE_ICBC_AR,
            self::ENTITY_TYPE_IMAGINBANK,
            self::ENTITY_TYPE_INBURSA_MX,
            self::ENTITY_TYPE_INGDIRECT,
            self::ENTITY_TYPE_INMOBILIARIOMEXICANO,
            self::ENTITY_TYPE_INTERCAM,
            self::ENTITY_TYPE_INVERSIS,
            self::ENTITY_TYPE_INVEX,
            self::ENTITY_TYPE_ITAU_BR,
            self::ENTITY_TYPE_JPMORGAN,
            self::ENTITY_TYPE_KUTXABANK,
            self::ENTITY_TYPE_LIBERBANK,
            self::ENTITY_TYPE_MACRO_AR,
            self::ENTITY_TYPE_MASTERCARD,
            self::ENTITY_TYPE_MEDIOLANUM,
            self::ENTITY_TYPE_MERCADOPAGO_AR,
            self::ENTITY_TYPE_MIFEL,
            self::ENTITY_TYPE_MILLENNIUMBCP,
            self::ENTITY_TYPE_MIZUHO,
            self::ENTITY_TYPE_MONEX,
            self::ENTITY_TYPE_MUFG,
            self::ENTITY_TYPE_MULTIVA,
            self::ENTITY_TYPE_NORDEA_FI,
            self::ENTITY_TYPE_ONEY,
            self::ENTITY_TYPE_OPENBANK,
            self::ENTITY_TYPE_PAGATODO,
            self::ENTITY_TYPE_PASCHIDISIENA_IT,
            self::ENTITY_TYPE_PIBANK,
            self::ENTITY_TYPE_PICHINCHA,
            self::ENTITY_TYPE_QONTO,
            self::ENTITY_TYPE_RABOBANK_NL,
            self::ENTITY_TYPE_REDSYS,
            self::ENTITY_TYPE_RENTA4,
            self::ENTITY_TYPE_RIPLEY,
            self::ENTITY_TYPE_RURALVIA,
            self::ENTITY_TYPE_SABADELL,
            self::ENTITY_TYPE_SALUZZO_IT,
            self::ENTITY_TYPE_SANPAOLO_IT,
            self::ENTITY_TYPE_SANTANDER_PRIV,
            self::ENTITY_TYPE_SANTANDER,
            self::ENTITY_TYPE_SARDEGNA_IT,
            self::ENTITY_TYPE_SCOTIABANK_MX,
            self::ENTITY_TYPE_SELFBANK,
            self::ENTITY_TYPE_SHINHANBANK,
            self::ENTITY_TYPE_SOLRED,
            self::ENTITY_TYPE_SUPERVIELLE_AR,
            self::ENTITY_TYPE_TARGOBANK,
            self::ENTITY_TYPE_TRIODOS,
            self::ENTITY_TYPE_UBIBANCA_IT,
            self::ENTITY_TYPE_UNICAJA,
            self::ENTITY_TYPE_VEPORMAS,
            self::ENTITY_TYPE_VOLKSWAGENBANK_MX,
            self::ENTITY_TYPE_WILOBANK,
            self::ENTITY_TYPE_WIZINK,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['entity_type'] = isset($data['entity_type']) ? $data['entity_type'] : null;
        $this->container['entity_name'] = isset($data['entity_name']) ? $data['entity_name'] : null;
        $this->container['automatic_synchronization_enabled'] = isset($data['automatic_synchronization_enabled']) ? $data['automatic_synchronization_enabled'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['last_movement_time'] = isset($data['last_movement_time']) ? $data['last_movement_time'] : null;
        $this->container['last_synchronization_time'] = isset($data['last_synchronization_time']) ? $data['last_synchronization_time'] : null;
        $this->container['next_synchronization_from_time'] = isset($data['next_synchronization_from_time']) ? $data['next_synchronization_from_time'] : null;
        $this->container['related_payment_methods'] = isset($data['related_payment_methods']) ? $data['related_payment_methods'] : null;
        $this->container['api_service'] = isset($data['api_service']) ? $data['api_service'] : null;
        $this->container['related_product_id'] = isset($data['related_product_id']) ? $data['related_product_id'] : null;
        $this->container['has_automatic_synchronization_credentials'] = isset($data['has_automatic_synchronization_credentials']) ? $data['has_automatic_synchronization_credentials'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEntityTypeAllowableValues();
        if (!in_array($this->container['entity_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'entity_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEntityTypeAllowableValues();
        if (!in_array($this->container['entity_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The identifier of the treasury account
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Indicates the type of treasury account
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the treasury account
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number The number of the treasury account (IBAN, card number...)
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets is_enabled
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     * @param bool $is_enabled Indicates if the payment method is active
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets entity_type
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     * @param string $entity_type The type of related entity
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        $allowed_values = $this->getEntityTypeAllowableValues();
        if (!is_null($entity_type) && !in_array($entity_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entity_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets entity_name
     * @return string
     */
    public function getEntityName()
    {
        return $this->container['entity_name'];
    }

    /**
     * Sets entity_name
     * @param string $entity_name The name of the related entity
     * @return $this
     */
    public function setEntityName($entity_name)
    {
        $this->container['entity_name'] = $entity_name;

        return $this;
    }

    /**
     * Gets automatic_synchronization_enabled
     * @return bool
     */
    public function getAutomaticSynchronizationEnabled()
    {
        return $this->container['automatic_synchronization_enabled'];
    }

    /**
     * Sets automatic_synchronization_enabled
     * @param bool $automatic_synchronization_enabled Indicates if the automatic synchronization for the account is enabled
     * @return $this
     */
    public function setAutomaticSynchronizationEnabled($automatic_synchronization_enabled)
    {
        $this->container['automatic_synchronization_enabled'] = $automatic_synchronization_enabled;

        return $this;
    }

    /**
     * Gets balance
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     * @param double $balance Contains the account current balance
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets last_movement_time
     * @return \DateTime
     */
    public function getLastMovementTime()
    {
        return $this->container['last_movement_time'];
    }

    /**
     * Sets last_movement_time
     * @param \DateTime $last_movement_time Contains the account last movement time
     * @return $this
     */
    public function setLastMovementTime($last_movement_time)
    {
        $this->container['last_movement_time'] = $last_movement_time;

        return $this;
    }

    /**
     * Gets last_synchronization_time
     * @return \DateTime
     */
    public function getLastSynchronizationTime()
    {
        return $this->container['last_synchronization_time'];
    }

    /**
     * Sets last_synchronization_time
     * @param \DateTime $last_synchronization_time Contains the account last synchronization time
     * @return $this
     */
    public function setLastSynchronizationTime($last_synchronization_time)
    {
        $this->container['last_synchronization_time'] = $last_synchronization_time;

        return $this;
    }

    /**
     * Gets next_synchronization_from_time
     * @return \DateTime
     */
    public function getNextSynchronizationFromTime()
    {
        return $this->container['next_synchronization_from_time'];
    }

    /**
     * Sets next_synchronization_from_time
     * @param \DateTime $next_synchronization_from_time Contains the time on which the next synchronization will start from
     * @return $this
     */
    public function setNextSynchronizationFromTime($next_synchronization_from_time)
    {
        $this->container['next_synchronization_from_time'] = $next_synchronization_from_time;

        return $this;
    }

    /**
     * Gets related_payment_methods
     * @return \Contasimple\Swagger\Client\Model\PaymentMethodApiModel[]
     */
    public function getRelatedPaymentMethods()
    {
        return $this->container['related_payment_methods'];
    }

    /**
     * Sets related_payment_methods
     * @param \Contasimple\Swagger\Client\Model\PaymentMethodApiModel[] $related_payment_methods The list of payment methods related to the treasury account
     * @return $this
     */
    public function setRelatedPaymentMethods($related_payment_methods)
    {
        $this->container['related_payment_methods'] = $related_payment_methods;

        return $this;
    }

    /**
     * Gets api_service
     * @return string
     */
    public function getApiService()
    {
        return $this->container['api_service'];
    }

    /**
     * Sets api_service
     * @param string $api_service The API linked service
     * @return $this
     */
    public function setApiService($api_service)
    {
        $this->container['api_service'] = $api_service;

        return $this;
    }

    /**
     * Gets related_product_id
     * @return string
     */
    public function getRelatedProductId()
    {
        return $this->container['related_product_id'];
    }

    /**
     * Sets related_product_id
     * @param string $related_product_id The API product account number related to the treasury account
     * @return $this
     */
    public function setRelatedProductId($related_product_id)
    {
        $this->container['related_product_id'] = $related_product_id;

        return $this;
    }

    /**
     * Gets has_automatic_synchronization_credentials
     * @return bool
     */
    public function getHasAutomaticSynchronizationCredentials()
    {
        return $this->container['has_automatic_synchronization_credentials'];
    }

    /**
     * Sets has_automatic_synchronization_credentials
     * @param bool $has_automatic_synchronization_credentials Checks if the account has the credentials stored for automatic synchronization
     * @return $this
     */
    public function setHasAutomaticSynchronizationCredentials($has_automatic_synchronization_credentials)
    {
        $this->container['has_automatic_synchronization_credentials'] = $has_automatic_synchronization_credentials;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Contasimple\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * ConfigurationPaymentMethodsApi
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Api;

use \Contasimple\Swagger\Client\ApiClient;
use \Contasimple\Swagger\Client\ApiException;
use \Contasimple\Swagger\Client\Configuration;
use \Contasimple\Swagger\Client\ObjectSerializer;

/**
 * ConfigurationPaymentMethodsApi Class Doc Comment
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationPaymentMethodsApi
{
    /**
     * API Client
     *
     * @var \Contasimple\Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Contasimple\Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Contasimple\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://api.prelive.contasimple.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Contasimple\Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Contasimple\Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ConfigurationPaymentMethodsApi
     */
    public function setApiClient(\Contasimple\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation paymentMethodsConfigurationDelete
     *
     * Removes the payment method with the given identifier
     *
     * @param int $method_id The identifier of the method to remove (required)
     * @param string $version  (required)
     * @param bool $bypass_remittance_validation Bypass the remittance validation that checks               if any remittance receipt contains the payment method to delete. Default to false. (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInt64
     */
    public function paymentMethodsConfigurationDelete($method_id, $version, $bypass_remittance_validation = null)
    {
        list($response) = $this->paymentMethodsConfigurationDeleteWithHttpInfo($method_id, $version, $bypass_remittance_validation);
        return $response;
    }

    /**
     * Operation paymentMethodsConfigurationDeleteWithHttpInfo
     *
     * Removes the payment method with the given identifier
     *
     * @param int $method_id The identifier of the method to remove (required)
     * @param string $version  (required)
     * @param bool $bypass_remittance_validation Bypass the remittance validation that checks               if any remittance receipt contains the payment method to delete. Default to false. (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInt64, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentMethodsConfigurationDeleteWithHttpInfo($method_id, $version, $bypass_remittance_validation = null)
    {
        // verify the required parameter 'method_id' is set
        if ($method_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $method_id when calling paymentMethodsConfigurationDelete');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling paymentMethodsConfigurationDelete');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/paymentMethods/{methodId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($bypass_remittance_validation !== null) {
            $queryParams['bypassRemittanceValidation'] = $this->apiClient->getSerializer()->toQueryValue($bypass_remittance_validation);
        }
        // path params
        if ($method_id !== null) {
            $resourcePath = str_replace(
                "{" . "methodId" . "}",
                $this->apiClient->getSerializer()->toPathValue($method_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInt64',
                '/api/v{version}/configuration/paymentMethods/{methodId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInt64', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInt64', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentMethodsConfigurationGetPaymentMethod
     *
     * Gets the information for the given payment method ID
     *
     * @param int $method_id The identifier of the payment method to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel
     */
    public function paymentMethodsConfigurationGetPaymentMethod($method_id, $version)
    {
        list($response) = $this->paymentMethodsConfigurationGetPaymentMethodWithHttpInfo($method_id, $version);
        return $response;
    }

    /**
     * Operation paymentMethodsConfigurationGetPaymentMethodWithHttpInfo
     *
     * Gets the information for the given payment method ID
     *
     * @param int $method_id The identifier of the payment method to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentMethodsConfigurationGetPaymentMethodWithHttpInfo($method_id, $version)
    {
        // verify the required parameter 'method_id' is set
        if ($method_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $method_id when calling paymentMethodsConfigurationGetPaymentMethod');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling paymentMethodsConfigurationGetPaymentMethod');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/paymentMethods/{methodId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($method_id !== null) {
            $resourcePath = str_replace(
                "{" . "methodId" . "}",
                $this->apiClient->getSerializer()->toPathValue($method_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel',
                '/api/v{version}/configuration/paymentMethods/{methodId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentMethodsConfigurationGetPaymentMethods
     *
     * Gets the list of payment methods
     *
     * @param string $version  (required)
     * @param bool $include_inactive  (optional)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort  (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodApiModel
     */
    public function paymentMethodsConfigurationGetPaymentMethods($version, $include_inactive = null, $start_index = null, $num_rows = null, $sort = null)
    {
        list($response) = $this->paymentMethodsConfigurationGetPaymentMethodsWithHttpInfo($version, $include_inactive, $start_index, $num_rows, $sort);
        return $response;
    }

    /**
     * Operation paymentMethodsConfigurationGetPaymentMethodsWithHttpInfo
     *
     * Gets the list of payment methods
     *
     * @param string $version  (required)
     * @param bool $include_inactive  (optional)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort  (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentMethodsConfigurationGetPaymentMethodsWithHttpInfo($version, $include_inactive = null, $start_index = null, $num_rows = null, $sort = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling paymentMethodsConfigurationGetPaymentMethods');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/paymentMethods";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($include_inactive !== null) {
            $queryParams['includeInactive'] = $this->apiClient->getSerializer()->toQueryValue($include_inactive);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($num_rows !== null) {
            $queryParams['numRows'] = $this->apiClient->getSerializer()->toQueryValue($num_rows);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodApiModel',
                '/api/v{version}/configuration/paymentMethods'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentMethodsConfigurationGetPaymentMethodsTypes
     *
     * Gets the list of payment methods types
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodTypeApiModel
     */
    public function paymentMethodsConfigurationGetPaymentMethodsTypes($version)
    {
        list($response) = $this->paymentMethodsConfigurationGetPaymentMethodsTypesWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation paymentMethodsConfigurationGetPaymentMethodsTypesWithHttpInfo
     *
     * Gets the list of payment methods types
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodTypeApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentMethodsConfigurationGetPaymentMethodsTypesWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling paymentMethodsConfigurationGetPaymentMethodsTypes');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/paymentMethods/types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodTypeApiModel',
                '/api/v{version}/configuration/paymentMethods/types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodTypeApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultPaymentMethodTypeApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentMethodsConfigurationPost
     *
     * Creates a new payment method
     *
     * @param \Contasimple\Swagger\Client\Model\PaymentMethodApiModel $method The information of the method to create (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel
     */
    public function paymentMethodsConfigurationPost($method, $version)
    {
        list($response) = $this->paymentMethodsConfigurationPostWithHttpInfo($method, $version);
        return $response;
    }

    /**
     * Operation paymentMethodsConfigurationPostWithHttpInfo
     *
     * Creates a new payment method
     *
     * @param \Contasimple\Swagger\Client\Model\PaymentMethodApiModel $method The information of the method to create (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentMethodsConfigurationPostWithHttpInfo($method, $version)
    {
        // verify the required parameter 'method' is set
        if ($method === null) {
            throw new \InvalidArgumentException('Missing the required parameter $method when calling paymentMethodsConfigurationPost');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling paymentMethodsConfigurationPost');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/paymentMethods";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($method)) {
            $_tempBody = $method;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel',
                '/api/v{version}/configuration/paymentMethods'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentMethodsConfigurationPut
     *
     * Updates the given payment method
     *
     * @param int $method_id The identifier of the method to update (required)
     * @param \Contasimple\Swagger\Client\Model\PaymentMethodApiModel $method The information of the method to update (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel
     */
    public function paymentMethodsConfigurationPut($method_id, $method, $version)
    {
        list($response) = $this->paymentMethodsConfigurationPutWithHttpInfo($method_id, $method, $version);
        return $response;
    }

    /**
     * Operation paymentMethodsConfigurationPutWithHttpInfo
     *
     * Updates the given payment method
     *
     * @param int $method_id The identifier of the method to update (required)
     * @param \Contasimple\Swagger\Client\Model\PaymentMethodApiModel $method The information of the method to update (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentMethodsConfigurationPutWithHttpInfo($method_id, $method, $version)
    {
        // verify the required parameter 'method_id' is set
        if ($method_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $method_id when calling paymentMethodsConfigurationPut');
        }
        // verify the required parameter 'method' is set
        if ($method === null) {
            throw new \InvalidArgumentException('Missing the required parameter $method when calling paymentMethodsConfigurationPut');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling paymentMethodsConfigurationPut');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/paymentMethods/{methodId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($method_id !== null) {
            $resourcePath = str_replace(
                "{" . "methodId" . "}",
                $this->apiClient->getSerializer()->toPathValue($method_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($method)) {
            $_tempBody = $method;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel',
                '/api/v{version}/configuration/paymentMethods/{methodId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultPaymentMethodApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

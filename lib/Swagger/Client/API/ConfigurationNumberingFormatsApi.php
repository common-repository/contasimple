<?php
/**
 * ConfigurationNumberingFormatsApi
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Api;

use \Contasimple\Swagger\Client\ApiClient;
use \Contasimple\Swagger\Client\ApiException;
use \Contasimple\Swagger\Client\Configuration;
use \Contasimple\Swagger\Client\ObjectSerializer;

/**
 * ConfigurationNumberingFormatsApi Class Doc Comment
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationNumberingFormatsApi
{
    /**
     * API Client
     *
     * @var \Contasimple\Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Contasimple\Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Contasimple\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Contasimple\Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Contasimple\Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ConfigurationNumberingFormatsApi
     */
    public function setApiClient(\Contasimple\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deliveryNoteNumberingFormatsActivate
     *
     * Activates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as activated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel
     */
    public function deliveryNoteNumberingFormatsActivate($id, $version, $accept_language = null)
    {
        list($response) = $this->deliveryNoteNumberingFormatsActivateWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation deliveryNoteNumberingFormatsActivateWithHttpInfo
     *
     * Activates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as activated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliveryNoteNumberingFormatsActivateWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deliveryNoteNumberingFormatsActivate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deliveryNoteNumberingFormatsActivate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}/activate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}/activate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deliveryNoteNumberingFormatsCreate
     *
     * Creates a new numbering format
     *
     * @param \Contasimple\Swagger\Client\Model\DeliveryNoteNumberingFormatRequestApiModel $format The information of the numbering format to create (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel
     */
    public function deliveryNoteNumberingFormatsCreate($format, $version, $accept_language = null)
    {
        list($response) = $this->deliveryNoteNumberingFormatsCreateWithHttpInfo($format, $version, $accept_language);
        return $response;
    }

    /**
     * Operation deliveryNoteNumberingFormatsCreateWithHttpInfo
     *
     * Creates a new numbering format
     *
     * @param \Contasimple\Swagger\Client\Model\DeliveryNoteNumberingFormatRequestApiModel $format The information of the numbering format to create (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliveryNoteNumberingFormatsCreateWithHttpInfo($format, $version, $accept_language = null)
    {
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling deliveryNoteNumberingFormatsCreate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deliveryNoteNumberingFormatsCreate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/deliveryNotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($format)) {
            $_tempBody = $format;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/deliveryNotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deliveryNoteNumberingFormatsDeactivate
     *
     * Deactivates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as deactivated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel
     */
    public function deliveryNoteNumberingFormatsDeactivate($id, $version, $accept_language = null)
    {
        list($response) = $this->deliveryNoteNumberingFormatsDeactivateWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation deliveryNoteNumberingFormatsDeactivateWithHttpInfo
     *
     * Deactivates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as deactivated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliveryNoteNumberingFormatsDeactivateWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deliveryNoteNumberingFormatsDeactivate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deliveryNoteNumberingFormatsDeactivate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}/deactivate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}/deactivate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deliveryNoteNumberingFormatsDelete
     *
     * Removes the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to remove (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultBoolean
     */
    public function deliveryNoteNumberingFormatsDelete($id, $version, $accept_language = null)
    {
        list($response) = $this->deliveryNoteNumberingFormatsDeleteWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation deliveryNoteNumberingFormatsDeleteWithHttpInfo
     *
     * Removes the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to remove (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultBoolean, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliveryNoteNumberingFormatsDeleteWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deliveryNoteNumberingFormatsDelete');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deliveryNoteNumberingFormatsDelete');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultBoolean',
                '/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultBoolean', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultBoolean', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deliveryNoteNumberingFormatsGet
     *
     * Gets the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to retrieve (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel
     */
    public function deliveryNoteNumberingFormatsGet($id, $version, $accept_language = null)
    {
        list($response) = $this->deliveryNoteNumberingFormatsGetWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation deliveryNoteNumberingFormatsGetWithHttpInfo
     *
     * Gets the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to retrieve (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliveryNoteNumberingFormatsGetWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deliveryNoteNumberingFormatsGet');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deliveryNoteNumberingFormatsGet');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deliveryNoteNumberingFormatsList
     *
     * Gets the list of delivery note numbering formats
     *
     * @param string $version  (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort The response can be sorted by: &lt;br /&gt;name&lt;br /&gt;type&lt;br /&gt;mask&lt;br /&gt;active&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+number (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultDeliveryNoteNumberingFormatApiModel
     */
    public function deliveryNoteNumberingFormatsList($version, $start_index = null, $num_rows = null, $sort = null, $accept_language = null)
    {
        list($response) = $this->deliveryNoteNumberingFormatsListWithHttpInfo($version, $start_index, $num_rows, $sort, $accept_language);
        return $response;
    }

    /**
     * Operation deliveryNoteNumberingFormatsListWithHttpInfo
     *
     * Gets the list of delivery note numbering formats
     *
     * @param string $version  (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort The response can be sorted by: &lt;br /&gt;name&lt;br /&gt;type&lt;br /&gt;mask&lt;br /&gt;active&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+number (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultDeliveryNoteNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliveryNoteNumberingFormatsListWithHttpInfo($version, $start_index = null, $num_rows = null, $sort = null, $accept_language = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deliveryNoteNumberingFormatsList');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/deliveryNotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($num_rows !== null) {
            $queryParams['numRows'] = $this->apiClient->getSerializer()->toQueryValue($num_rows);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultDeliveryNoteNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/deliveryNotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultDeliveryNoteNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultDeliveryNoteNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deliveryNoteNumberingFormatsSetDefault
     *
     * Sets the default numbering format
     *
     * @param int $id The identifier of the numbering format to set as default (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel
     */
    public function deliveryNoteNumberingFormatsSetDefault($id, $version, $accept_language = null)
    {
        list($response) = $this->deliveryNoteNumberingFormatsSetDefaultWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation deliveryNoteNumberingFormatsSetDefaultWithHttpInfo
     *
     * Sets the default numbering format
     *
     * @param int $id The identifier of the numbering format to set as default (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliveryNoteNumberingFormatsSetDefaultWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deliveryNoteNumberingFormatsSetDefault');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deliveryNoteNumberingFormatsSetDefault');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}/setDefault";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}/setDefault'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deliveryNoteNumberingFormatsUpdate
     *
     * Updates a numbering format
     *
     * @param int $id The identifier of the numbering format to update (required)
     * @param \Contasimple\Swagger\Client\Model\DeliveryNoteNumberingFormatRequestApiModel $format The information of the numbering format to update (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel
     */
    public function deliveryNoteNumberingFormatsUpdate($id, $format, $version, $accept_language = null)
    {
        list($response) = $this->deliveryNoteNumberingFormatsUpdateWithHttpInfo($id, $format, $version, $accept_language);
        return $response;
    }

    /**
     * Operation deliveryNoteNumberingFormatsUpdateWithHttpInfo
     *
     * Updates a numbering format
     *
     * @param int $id The identifier of the numbering format to update (required)
     * @param \Contasimple\Swagger\Client\Model\DeliveryNoteNumberingFormatRequestApiModel $format The information of the numbering format to update (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliveryNoteNumberingFormatsUpdateWithHttpInfo($id, $format, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deliveryNoteNumberingFormatsUpdate');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling deliveryNoteNumberingFormatsUpdate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deliveryNoteNumberingFormatsUpdate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($format)) {
            $_tempBody = $format;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/deliveryNotes/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultDeliveryNoteNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation estimateNumberingFormatsActivate
     *
     * Activates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as activated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel
     */
    public function estimateNumberingFormatsActivate($id, $version, $accept_language = null)
    {
        list($response) = $this->estimateNumberingFormatsActivateWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation estimateNumberingFormatsActivateWithHttpInfo
     *
     * Activates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as activated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNumberingFormatsActivateWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling estimateNumberingFormatsActivate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling estimateNumberingFormatsActivate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/estimates/{id}/activate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/estimates/{id}/activate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation estimateNumberingFormatsCreate
     *
     * Creates a new numbering format
     *
     * @param \Contasimple\Swagger\Client\Model\EstimateNumberingFormatRequestApiModel $format The information of the numbering format to create (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel
     */
    public function estimateNumberingFormatsCreate($format, $version, $accept_language = null)
    {
        list($response) = $this->estimateNumberingFormatsCreateWithHttpInfo($format, $version, $accept_language);
        return $response;
    }

    /**
     * Operation estimateNumberingFormatsCreateWithHttpInfo
     *
     * Creates a new numbering format
     *
     * @param \Contasimple\Swagger\Client\Model\EstimateNumberingFormatRequestApiModel $format The information of the numbering format to create (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNumberingFormatsCreateWithHttpInfo($format, $version, $accept_language = null)
    {
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling estimateNumberingFormatsCreate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling estimateNumberingFormatsCreate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/estimates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($format)) {
            $_tempBody = $format;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/estimates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation estimateNumberingFormatsDeactivate
     *
     * Deactivates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as deactivated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel
     */
    public function estimateNumberingFormatsDeactivate($id, $version, $accept_language = null)
    {
        list($response) = $this->estimateNumberingFormatsDeactivateWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation estimateNumberingFormatsDeactivateWithHttpInfo
     *
     * Deactivates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as deactivated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNumberingFormatsDeactivateWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling estimateNumberingFormatsDeactivate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling estimateNumberingFormatsDeactivate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/estimates/{id}/deactivate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/estimates/{id}/deactivate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation estimateNumberingFormatsDelete
     *
     * Removes the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to remove (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultBoolean
     */
    public function estimateNumberingFormatsDelete($id, $version, $accept_language = null)
    {
        list($response) = $this->estimateNumberingFormatsDeleteWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation estimateNumberingFormatsDeleteWithHttpInfo
     *
     * Removes the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to remove (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultBoolean, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNumberingFormatsDeleteWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling estimateNumberingFormatsDelete');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling estimateNumberingFormatsDelete');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/estimates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultBoolean',
                '/api/v{version}/configuration/numberingFormats/estimates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultBoolean', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultBoolean', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation estimateNumberingFormatsGet
     *
     * Gets the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to retrieve (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel
     */
    public function estimateNumberingFormatsGet($id, $version, $accept_language = null)
    {
        list($response) = $this->estimateNumberingFormatsGetWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation estimateNumberingFormatsGetWithHttpInfo
     *
     * Gets the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to retrieve (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNumberingFormatsGetWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling estimateNumberingFormatsGet');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling estimateNumberingFormatsGet');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/estimates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/estimates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation estimateNumberingFormatsList
     *
     * Gets the list of estimate numbering formats
     *
     * @param string $version  (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort The response can be sorted by: &lt;br /&gt;name&lt;br /&gt;type&lt;br /&gt;mask&lt;br /&gt;active&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+number (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultEstimateNumberingFormatApiModel
     */
    public function estimateNumberingFormatsList($version, $start_index = null, $num_rows = null, $sort = null, $accept_language = null)
    {
        list($response) = $this->estimateNumberingFormatsListWithHttpInfo($version, $start_index, $num_rows, $sort, $accept_language);
        return $response;
    }

    /**
     * Operation estimateNumberingFormatsListWithHttpInfo
     *
     * Gets the list of estimate numbering formats
     *
     * @param string $version  (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort The response can be sorted by: &lt;br /&gt;name&lt;br /&gt;type&lt;br /&gt;mask&lt;br /&gt;active&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+number (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultEstimateNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNumberingFormatsListWithHttpInfo($version, $start_index = null, $num_rows = null, $sort = null, $accept_language = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling estimateNumberingFormatsList');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/estimates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($num_rows !== null) {
            $queryParams['numRows'] = $this->apiClient->getSerializer()->toQueryValue($num_rows);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultEstimateNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/estimates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultEstimateNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultEstimateNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation estimateNumberingFormatsSetDefault
     *
     * Sets the default numbering format
     *
     * @param int $id The identifier of the numbering format to set as default (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel
     */
    public function estimateNumberingFormatsSetDefault($id, $version, $accept_language = null)
    {
        list($response) = $this->estimateNumberingFormatsSetDefaultWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation estimateNumberingFormatsSetDefaultWithHttpInfo
     *
     * Sets the default numbering format
     *
     * @param int $id The identifier of the numbering format to set as default (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNumberingFormatsSetDefaultWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling estimateNumberingFormatsSetDefault');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling estimateNumberingFormatsSetDefault');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/estimates/{id}/setDefault";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/estimates/{id}/setDefault'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation estimateNumberingFormatsUpdate
     *
     * Updates a numbering format
     *
     * @param int $id The identifier of the numbering format to update (required)
     * @param \Contasimple\Swagger\Client\Model\EstimateNumberingFormatRequestApiModel $format The information of the numbering format to update (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel
     */
    public function estimateNumberingFormatsUpdate($id, $format, $version, $accept_language = null)
    {
        list($response) = $this->estimateNumberingFormatsUpdateWithHttpInfo($id, $format, $version, $accept_language);
        return $response;
    }

    /**
     * Operation estimateNumberingFormatsUpdateWithHttpInfo
     *
     * Updates a numbering format
     *
     * @param int $id The identifier of the numbering format to update (required)
     * @param \Contasimple\Swagger\Client\Model\EstimateNumberingFormatRequestApiModel $format The information of the numbering format to update (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNumberingFormatsUpdateWithHttpInfo($id, $format, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling estimateNumberingFormatsUpdate');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling estimateNumberingFormatsUpdate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling estimateNumberingFormatsUpdate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/estimates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($format)) {
            $_tempBody = $format;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/estimates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultEstimateNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation invoiceNumberingFormatsActivate
     *
     * Activates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as activated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel
     */
    public function invoiceNumberingFormatsActivate($id, $version, $accept_language = null)
    {
        list($response) = $this->invoiceNumberingFormatsActivateWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation invoiceNumberingFormatsActivateWithHttpInfo
     *
     * Activates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as activated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceNumberingFormatsActivateWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling invoiceNumberingFormatsActivate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling invoiceNumberingFormatsActivate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/invoices/{id}/activate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/invoices/{id}/activate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation invoiceNumberingFormatsCreate
     *
     * Creates a new numbering format
     *
     * @param \Contasimple\Swagger\Client\Model\InvoiceNumberingFormatCreateRequestApiModel $format The information of the numbering format to create (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel
     */
    public function invoiceNumberingFormatsCreate($format, $version, $accept_language = null)
    {
        list($response) = $this->invoiceNumberingFormatsCreateWithHttpInfo($format, $version, $accept_language);
        return $response;
    }

    /**
     * Operation invoiceNumberingFormatsCreateWithHttpInfo
     *
     * Creates a new numbering format
     *
     * @param \Contasimple\Swagger\Client\Model\InvoiceNumberingFormatCreateRequestApiModel $format The information of the numbering format to create (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceNumberingFormatsCreateWithHttpInfo($format, $version, $accept_language = null)
    {
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling invoiceNumberingFormatsCreate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling invoiceNumberingFormatsCreate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/invoices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($format)) {
            $_tempBody = $format;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/invoices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation invoiceNumberingFormatsDeactivate
     *
     * Deactivates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as deactivated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel
     */
    public function invoiceNumberingFormatsDeactivate($id, $version, $accept_language = null)
    {
        list($response) = $this->invoiceNumberingFormatsDeactivateWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation invoiceNumberingFormatsDeactivateWithHttpInfo
     *
     * Deactivates the numbering format
     *
     * @param int $id The identifier of the numbering format to set as deactivated (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceNumberingFormatsDeactivateWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling invoiceNumberingFormatsDeactivate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling invoiceNumberingFormatsDeactivate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/invoices/{id}/deactivate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/invoices/{id}/deactivate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation invoiceNumberingFormatsDelete
     *
     * Removes the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to remove (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultBoolean
     */
    public function invoiceNumberingFormatsDelete($id, $version, $accept_language = null)
    {
        list($response) = $this->invoiceNumberingFormatsDeleteWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation invoiceNumberingFormatsDeleteWithHttpInfo
     *
     * Removes the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to remove (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultBoolean, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceNumberingFormatsDeleteWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling invoiceNumberingFormatsDelete');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling invoiceNumberingFormatsDelete');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/invoices/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultBoolean',
                '/api/v{version}/configuration/numberingFormats/invoices/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultBoolean', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultBoolean', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation invoiceNumberingFormatsGet
     *
     * Gets the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to retrieve (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel
     */
    public function invoiceNumberingFormatsGet($id, $version, $accept_language = null)
    {
        list($response) = $this->invoiceNumberingFormatsGetWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation invoiceNumberingFormatsGetWithHttpInfo
     *
     * Gets the information for the given numbering format
     *
     * @param int $id The identifier of the numbering format to retrieve (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceNumberingFormatsGetWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling invoiceNumberingFormatsGet');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling invoiceNumberingFormatsGet');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/invoices/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/invoices/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation invoiceNumberingFormatsList
     *
     * Gets the list of invoice numbering formats
     *
     * @param string $version  (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort The response can be sorted by: &lt;br /&gt;name&lt;br /&gt;type&lt;br /&gt;mask&lt;br /&gt;active&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+number (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultInvoiceNumberingFormatApiModel
     */
    public function invoiceNumberingFormatsList($version, $start_index = null, $num_rows = null, $sort = null, $accept_language = null)
    {
        list($response) = $this->invoiceNumberingFormatsListWithHttpInfo($version, $start_index, $num_rows, $sort, $accept_language);
        return $response;
    }

    /**
     * Operation invoiceNumberingFormatsListWithHttpInfo
     *
     * Gets the list of invoice numbering formats
     *
     * @param string $version  (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort The response can be sorted by: &lt;br /&gt;name&lt;br /&gt;type&lt;br /&gt;mask&lt;br /&gt;active&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+number (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultInvoiceNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceNumberingFormatsListWithHttpInfo($version, $start_index = null, $num_rows = null, $sort = null, $accept_language = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling invoiceNumberingFormatsList');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/invoices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($num_rows !== null) {
            $queryParams['numRows'] = $this->apiClient->getSerializer()->toQueryValue($num_rows);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/invoices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation invoiceNumberingFormatsSetDefault
     *
     * Sets the default numbering format
     *
     * @param int $id The identifier of the numbering format to set as default (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel
     */
    public function invoiceNumberingFormatsSetDefault($id, $version, $accept_language = null)
    {
        list($response) = $this->invoiceNumberingFormatsSetDefaultWithHttpInfo($id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation invoiceNumberingFormatsSetDefaultWithHttpInfo
     *
     * Sets the default numbering format
     *
     * @param int $id The identifier of the numbering format to set as default (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceNumberingFormatsSetDefaultWithHttpInfo($id, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling invoiceNumberingFormatsSetDefault');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling invoiceNumberingFormatsSetDefault');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/invoices/{id}/setDefault";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/invoices/{id}/setDefault'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation invoiceNumberingFormatsUpdate
     *
     * Updates a numbering format
     *
     * @param int $id The identifier of the numbering format to update (required)
     * @param \Contasimple\Swagger\Client\Model\InvoiceNumberingFormatUpdateRequestApiModel $format The information of the numbering format to update (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel
     */
    public function invoiceNumberingFormatsUpdate($id, $format, $version, $accept_language = null)
    {
        list($response) = $this->invoiceNumberingFormatsUpdateWithHttpInfo($id, $format, $version, $accept_language);
        return $response;
    }

    /**
     * Operation invoiceNumberingFormatsUpdateWithHttpInfo
     *
     * Updates a numbering format
     *
     * @param int $id The identifier of the numbering format to update (required)
     * @param \Contasimple\Swagger\Client\Model\InvoiceNumberingFormatUpdateRequestApiModel $format The information of the numbering format to update (required)
     * @param string $version  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceNumberingFormatsUpdateWithHttpInfo($id, $format, $version, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling invoiceNumberingFormatsUpdate');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling invoiceNumberingFormatsUpdate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling invoiceNumberingFormatsUpdate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/numberingFormats/invoices/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($format)) {
            $_tempBody = $format;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel',
                '/api/v{version}/configuration/numberingFormats/invoices/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceNumberingFormatApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

<?php
/**
 * MeCompaniesApi
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Api;

use \Contasimple\Swagger\Client\ApiClient;
use \Contasimple\Swagger\Client\ApiException;
use \Contasimple\Swagger\Client\Configuration;
use \Contasimple\Swagger\Client\ObjectSerializer;

/**
 * MeCompaniesApi Class Doc Comment
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeCompaniesApi
{
    /**
     * API Client
     *
     * @var \Contasimple\Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Contasimple\Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Contasimple\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://api.prelive.contasimple.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Contasimple\Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Contasimple\Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return MeCompaniesApi
     */
    public function setApiClient(\Contasimple\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation myCompaniesAvatar
     *
     * Gets the current company avatar image
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function myCompaniesAvatar($version)
    {
        list($response) = $this->myCompaniesAvatarWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation myCompaniesAvatarWithHttpInfo
     *
     * Gets the current company avatar image
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesAvatarWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesAvatar');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/company/avatar";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/api/v{version}/me/company/avatar'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesAvatar_0
     *
     * Gets the company avatar image
     *
     * @param int $company_id  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function myCompaniesAvatar_0($company_id, $version)
    {
        list($response) = $this->myCompaniesAvatar_0WithHttpInfo($company_id, $version);
        return $response;
    }

    /**
     * Operation myCompaniesAvatar_0WithHttpInfo
     *
     * Gets the company avatar image
     *
     * @param int $company_id  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesAvatar_0WithHttpInfo($company_id, $version)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling myCompaniesAvatar_0');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesAvatar_0');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/company/avatar/{companyId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                "{" . "companyId" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/api/v{version}/me/company/avatar/{companyId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesConfigure
     *
     * Updates the current company fiscal information
     *
     * @param \Contasimple\Swagger\Client\Model\ConfigureCompanyApiModel $configuration  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel
     */
    public function myCompaniesConfigure($configuration, $version)
    {
        list($response) = $this->myCompaniesConfigureWithHttpInfo($configuration, $version);
        return $response;
    }

    /**
     * Operation myCompaniesConfigureWithHttpInfo
     *
     * Updates the current company fiscal information
     *
     * @param \Contasimple\Swagger\Client\Model\ConfigureCompanyApiModel $configuration  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesConfigureWithHttpInfo($configuration, $version)
    {
        // verify the required parameter 'configuration' is set
        if ($configuration === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configuration when calling myCompaniesConfigure');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesConfigure');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/company/configure";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configuration)) {
            $_tempBody = $configuration;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel',
                '/api/v{version}/me/company/configure'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesCreate
     *
     * Creates a new company for the current user
     *
     * @param \Contasimple\Swagger\Client\Model\CreateCompanyApiModel $company  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel
     */
    public function myCompaniesCreate($company, $version)
    {
        list($response) = $this->myCompaniesCreateWithHttpInfo($company, $version);
        return $response;
    }

    /**
     * Operation myCompaniesCreateWithHttpInfo
     *
     * Creates a new company for the current user
     *
     * @param \Contasimple\Swagger\Client\Model\CreateCompanyApiModel $company  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesCreateWithHttpInfo($company, $version)
    {
        // verify the required parameter 'company' is set
        if ($company === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company when calling myCompaniesCreate');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesCreate');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/companies";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($company)) {
            $_tempBody = $company;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel',
                '/api/v{version}/me/companies'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesDeleteAvatar
     *
     * Deletes the current company avatar image
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInt64
     */
    public function myCompaniesDeleteAvatar($version)
    {
        list($response) = $this->myCompaniesDeleteAvatarWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation myCompaniesDeleteAvatarWithHttpInfo
     *
     * Deletes the current company avatar image
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInt64, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesDeleteAvatarWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesDeleteAvatar');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/company/avatar";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInt64',
                '/api/v{version}/me/company/avatar'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInt64', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInt64', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesGet
     *
     * Gets the current company information
     *
     * @param int $id  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel
     */
    public function myCompaniesGet($id, $version)
    {
        list($response) = $this->myCompaniesGetWithHttpInfo($id, $version);
        return $response;
    }

    /**
     * Operation myCompaniesGetWithHttpInfo
     *
     * Gets the current company information
     *
     * @param int $id  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesGetWithHttpInfo($id, $version)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myCompaniesGet');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesGet');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/company/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel',
                '/api/v{version}/me/company/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesGetCompanies
     *
     * Gets the current user companies
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultCompanyApiModel
     */
    public function myCompaniesGetCompanies($version)
    {
        list($response) = $this->myCompaniesGetCompaniesWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation myCompaniesGetCompaniesWithHttpInfo
     *
     * Gets the current user companies
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultCompanyApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesGetCompaniesWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesGetCompanies');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/companies";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultCompanyApiModel',
                '/api/v{version}/me/companies'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultCompanyApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultCompanyApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesGetCompaniesLightweight
     *
     * Gets the current user companies (lightweight response)
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultCompanyLightweightApiModel
     */
    public function myCompaniesGetCompaniesLightweight($version)
    {
        list($response) = $this->myCompaniesGetCompaniesLightweightWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation myCompaniesGetCompaniesLightweightWithHttpInfo
     *
     * Gets the current user companies (lightweight response)
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultCompanyLightweightApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesGetCompaniesLightweightWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesGetCompaniesLightweight');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/companies/lightweight";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultCompanyLightweightApiModel',
                '/api/v{version}/me/companies/lightweight'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultCompanyLightweightApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultCompanyLightweightApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesGetCurrent
     *
     * Gets the current company information
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel
     */
    public function myCompaniesGetCurrent($version)
    {
        list($response) = $this->myCompaniesGetCurrentWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation myCompaniesGetCurrentWithHttpInfo
     *
     * Gets the current company information
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesGetCurrentWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesGetCurrent');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/company";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel',
                '/api/v{version}/me/company'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultCompanyApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myCompaniesGetLightweight
     *
     * Gets the current company information (lightweight version)
     *
     * @param int $id  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultCompanyLightweightApiModel
     */
    public function myCompaniesGetLightweight($id, $version)
    {
        list($response) = $this->myCompaniesGetLightweightWithHttpInfo($id, $version);
        return $response;
    }

    /**
     * Operation myCompaniesGetLightweightWithHttpInfo
     *
     * Gets the current company information (lightweight version)
     *
     * @param int $id  (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultCompanyLightweightApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function myCompaniesGetLightweightWithHttpInfo($id, $version)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myCompaniesGetLightweight');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling myCompaniesGetLightweight');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/me/company/lightweight/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultCompanyLightweightApiModel',
                '/api/v{version}/me/company/lightweight/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultCompanyLightweightApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultCompanyLightweightApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

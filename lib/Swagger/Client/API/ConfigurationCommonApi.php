<?php
/**
 * ConfigurationCommonApi
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Api;

use \Contasimple\Swagger\Client\ApiClient;
use \Contasimple\Swagger\Client\ApiException;
use \Contasimple\Swagger\Client\Configuration;
use \Contasimple\Swagger\Client\ObjectSerializer;

/**
 * ConfigurationCommonApi Class Doc Comment
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationCommonApi
{
    /**
     * API Client
     *
     * @var \Contasimple\Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Contasimple\Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Contasimple\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://api.prelive.contasimple.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Contasimple\Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Contasimple\Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ConfigurationCommonApi
     */
    public function setApiClient(\Contasimple\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation companyTypesConfigurationGetCompanyType
     *
     * Gets the configuration for the type with the given ID
     *
     * @param int $type_id The identifier of the type to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultCompanyTypeApiModel
     */
    public function companyTypesConfigurationGetCompanyType($type_id, $version)
    {
        list($response) = $this->companyTypesConfigurationGetCompanyTypeWithHttpInfo($type_id, $version);
        return $response;
    }

    /**
     * Operation companyTypesConfigurationGetCompanyTypeWithHttpInfo
     *
     * Gets the configuration for the type with the given ID
     *
     * @param int $type_id The identifier of the type to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultCompanyTypeApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyTypesConfigurationGetCompanyTypeWithHttpInfo($type_id, $version)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type_id when calling companyTypesConfigurationGetCompanyType');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling companyTypesConfigurationGetCompanyType');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/companyTypes/{typeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                "{" . "typeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($type_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultCompanyTypeApiModel',
                '/api/v{version}/configuration/companyTypes/{typeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultCompanyTypeApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultCompanyTypeApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation companyTypesConfigurationGetCompanyTypes
     *
     * Gets the list of company types
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultCompanyTypeApiModel
     */
    public function companyTypesConfigurationGetCompanyTypes($version)
    {
        list($response) = $this->companyTypesConfigurationGetCompanyTypesWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation companyTypesConfigurationGetCompanyTypesWithHttpInfo
     *
     * Gets the list of company types
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultCompanyTypeApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyTypesConfigurationGetCompanyTypesWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling companyTypesConfigurationGetCompanyTypes');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/companyTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultCompanyTypeApiModel',
                '/api/v{version}/configuration/companyTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultCompanyTypeApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultCompanyTypeApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationGetConfiguration
     *
     * Gets the platform configuration
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultConfigurationApiModel
     */
    public function configurationGetConfiguration($version)
    {
        list($response) = $this->configurationGetConfigurationWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation configurationGetConfigurationWithHttpInfo
     *
     * Gets the platform configuration
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultConfigurationApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationGetConfigurationWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling configurationGetConfiguration');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultConfigurationApiModel',
                '/api/v{version}/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultConfigurationApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultConfigurationApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation countriesConfigurationGetCountries
     *
     * Gets the list of countries
     *
     * @param string $version  (required)
     * @param bool $all  (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultCountryApiModel
     */
    public function countriesConfigurationGetCountries($version, $all = null)
    {
        list($response) = $this->countriesConfigurationGetCountriesWithHttpInfo($version, $all);
        return $response;
    }

    /**
     * Operation countriesConfigurationGetCountriesWithHttpInfo
     *
     * Gets the list of countries
     *
     * @param string $version  (required)
     * @param bool $all  (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultCountryApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function countriesConfigurationGetCountriesWithHttpInfo($version, $all = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling countriesConfigurationGetCountries');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/countries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($all !== null) {
            $queryParams['all'] = $this->apiClient->getSerializer()->toQueryValue($all);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultCountryApiModel',
                '/api/v{version}/configuration/countries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultCountryApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultCountryApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation countriesConfigurationGetCountry
     *
     * Gets the configuration for the country with the given ID
     *
     * @param int $country_id The identifier of the country to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultCountryApiModel
     */
    public function countriesConfigurationGetCountry($country_id, $version)
    {
        list($response) = $this->countriesConfigurationGetCountryWithHttpInfo($country_id, $version);
        return $response;
    }

    /**
     * Operation countriesConfigurationGetCountryWithHttpInfo
     *
     * Gets the configuration for the country with the given ID
     *
     * @param int $country_id The identifier of the country to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultCountryApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function countriesConfigurationGetCountryWithHttpInfo($country_id, $version)
    {
        // verify the required parameter 'country_id' is set
        if ($country_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_id when calling countriesConfigurationGetCountry');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling countriesConfigurationGetCountry');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/countries/{countryId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($country_id !== null) {
            $resourcePath = str_replace(
                "{" . "countryId" . "}",
                $this->apiClient->getSerializer()->toPathValue($country_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultCountryApiModel',
                '/api/v{version}/configuration/countries/{countryId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultCountryApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultCountryApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation irpfModesConfigurationGetIrpfMode
     *
     * Gets the configuration for the mode with the given ID
     *
     * @param int $mode_id The identifier of the mode to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultIrpfModeApiModel
     */
    public function irpfModesConfigurationGetIrpfMode($mode_id, $version)
    {
        list($response) = $this->irpfModesConfigurationGetIrpfModeWithHttpInfo($mode_id, $version);
        return $response;
    }

    /**
     * Operation irpfModesConfigurationGetIrpfModeWithHttpInfo
     *
     * Gets the configuration for the mode with the given ID
     *
     * @param int $mode_id The identifier of the mode to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultIrpfModeApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function irpfModesConfigurationGetIrpfModeWithHttpInfo($mode_id, $version)
    {
        // verify the required parameter 'mode_id' is set
        if ($mode_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_id when calling irpfModesConfigurationGetIrpfMode');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling irpfModesConfigurationGetIrpfMode');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/irpf/{modeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($mode_id !== null) {
            $resourcePath = str_replace(
                "{" . "modeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($mode_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultIrpfModeApiModel',
                '/api/v{version}/configuration/irpf/{modeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultIrpfModeApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultIrpfModeApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation irpfModesConfigurationGetIrpfModes
     *
     * Gets the list of IRPF estimation modes
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultIrpfModeApiModel
     */
    public function irpfModesConfigurationGetIrpfModes($version)
    {
        list($response) = $this->irpfModesConfigurationGetIrpfModesWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation irpfModesConfigurationGetIrpfModesWithHttpInfo
     *
     * Gets the list of IRPF estimation modes
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultIrpfModeApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function irpfModesConfigurationGetIrpfModesWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling irpfModesConfigurationGetIrpfModes');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/irpf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultIrpfModeApiModel',
                '/api/v{version}/configuration/irpf'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultIrpfModeApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultIrpfModeApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vatModesConfigurationGetIrpfMode
     *
     * Gets the configuration for the mode with the given ID
     *
     * @param int $mode_id The identifier of the mode to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultVatModeApiModel
     */
    public function vatModesConfigurationGetIrpfMode($mode_id, $version)
    {
        list($response) = $this->vatModesConfigurationGetIrpfModeWithHttpInfo($mode_id, $version);
        return $response;
    }

    /**
     * Operation vatModesConfigurationGetIrpfModeWithHttpInfo
     *
     * Gets the configuration for the mode with the given ID
     *
     * @param int $mode_id The identifier of the mode to retrieve (required)
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultVatModeApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function vatModesConfigurationGetIrpfModeWithHttpInfo($mode_id, $version)
    {
        // verify the required parameter 'mode_id' is set
        if ($mode_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_id when calling vatModesConfigurationGetIrpfMode');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling vatModesConfigurationGetIrpfMode');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/vat/{modeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($mode_id !== null) {
            $resourcePath = str_replace(
                "{" . "modeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($mode_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultVatModeApiModel',
                '/api/v{version}/configuration/vat/{modeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultVatModeApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultVatModeApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vatModesConfigurationGetIrpfModes
     *
     * Gets the list of IRPF estimation modes
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultVatModeApiModel
     */
    public function vatModesConfigurationGetIrpfModes($version)
    {
        list($response) = $this->vatModesConfigurationGetIrpfModesWithHttpInfo($version);
        return $response;
    }

    /**
     * Operation vatModesConfigurationGetIrpfModesWithHttpInfo
     *
     * Gets the list of IRPF estimation modes
     *
     * @param string $version  (required)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultVatModeApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function vatModesConfigurationGetIrpfModesWithHttpInfo($version)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling vatModesConfigurationGetIrpfModes');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/configuration/vat";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultVatModeApiModel',
                '/api/v{version}/configuration/vat'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultVatModeApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultVatModeApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

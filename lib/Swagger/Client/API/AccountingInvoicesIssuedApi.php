<?php
/**
 * AccountingInvoicesIssuedApi
 * PHP version 5
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Contasimple API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Contasimple\Swagger\Client\Api;

use \Contasimple\Swagger\Client\ApiClient;
use \Contasimple\Swagger\Client\ApiException;
use \Contasimple\Swagger\Client\Configuration;
use \Contasimple\Swagger\Client\ObjectSerializer;

/**
 * AccountingInvoicesIssuedApi Class Doc Comment
 *
 * @category Class
 * @package  Contasimple\Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountingInvoicesIssuedApi
{
    /**
     * API Client
     *
     * @var \Contasimple\Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Contasimple\Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Contasimple\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Contasimple\Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Contasimple\Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AccountingInvoicesIssuedApi
     */
    public function setApiClient(\Contasimple\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation accountingInvoicesIssuedAttach
     *
     * Attaches a file or files to the given invoice
     *
     * @param int $invoice_id The identifier of the invoice to attach files to (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultFileApiModel
     */
    public function accountingInvoicesIssuedAttach($invoice_id, $version, $period, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedAttachWithHttpInfo($invoice_id, $version, $period, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedAttachWithHttpInfo
     *
     * Attaches a file or files to the given invoice
     *
     * @param int $invoice_id The identifier of the invoice to attach files to (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultFileApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedAttachWithHttpInfo($invoice_id, $version, $period, $accept_language = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_id when calling accountingInvoicesIssuedAttach');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedAttach');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedAttach');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}/attach";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultFileApiModel',
                '/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}/attach'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultFileApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultFileApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedAttachments
     *
     * Returns the list of attachments of this invoice
     *
     * @param int $invoice_id The identifier of the invoice to attach files to (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort The response can be sorted by:   - filename (Sorts the payments by filename)  - date (Sorts the payments by date)  - size (Sorts the payments by amount)&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+name (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultFileApiModel
     */
    public function accountingInvoicesIssuedAttachments($invoice_id, $version, $period, $start_index = null, $num_rows = null, $sort = null, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedAttachmentsWithHttpInfo($invoice_id, $version, $period, $start_index, $num_rows, $sort, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedAttachmentsWithHttpInfo
     *
     * Returns the list of attachments of this invoice
     *
     * @param int $invoice_id The identifier of the invoice to attach files to (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $sort The response can be sorted by:   - filename (Sorts the payments by filename)  - date (Sorts the payments by date)  - size (Sorts the payments by amount)&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+name (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultFileApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedAttachmentsWithHttpInfo($invoice_id, $version, $period, $start_index = null, $num_rows = null, $sort = null, $accept_language = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_id when calling accountingInvoicesIssuedAttachments');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedAttachments');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedAttachments');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}/attachments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($num_rows !== null) {
            $queryParams['numRows'] = $this->apiClient->getSerializer()->toQueryValue($num_rows);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultFileApiModel',
                '/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}/attachments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultFileApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultFileApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedCreateInvoice
     *
     * Creates a new issued invoice
     *
     * @param string $period The period where to create the invoice (required)
     * @param \Contasimple\Swagger\Client\Model\CreateIssuedInvoiceApiModel $invoice The invoice information (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel
     */
    public function accountingInvoicesIssuedCreateInvoice($period, $invoice, $version, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedCreateInvoiceWithHttpInfo($period, $invoice, $version, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedCreateInvoiceWithHttpInfo
     *
     * Creates a new issued invoice
     *
     * @param string $period The period where to create the invoice (required)
     * @param \Contasimple\Swagger\Client\Model\CreateIssuedInvoiceApiModel $invoice The invoice information (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedCreateInvoiceWithHttpInfo($period, $invoice, $version, $accept_language = null)
    {
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedCreateInvoice');
        }
        // verify the required parameter 'invoice' is set
        if ($invoice === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice when calling accountingInvoicesIssuedCreateInvoice');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedCreateInvoice');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($invoice)) {
            $_tempBody = $invoice;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel',
                '/api/v{version}/accounting/{period}/invoices/issued'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedDeleteInvoice
     *
     * Deletes the given invoice
     *
     * @param string $period The period where to create the invoice (required)
     * @param int $invoice_id The invoice identifier to remove (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInt64
     */
    public function accountingInvoicesIssuedDeleteInvoice($period, $invoice_id, $version, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedDeleteInvoiceWithHttpInfo($period, $invoice_id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedDeleteInvoiceWithHttpInfo
     *
     * Deletes the given invoice
     *
     * @param string $period The period where to create the invoice (required)
     * @param int $invoice_id The invoice identifier to remove (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInt64, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedDeleteInvoiceWithHttpInfo($period, $invoice_id, $version, $accept_language = null)
    {
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedDeleteInvoice');
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_id when calling accountingInvoicesIssuedDeleteInvoice');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedDeleteInvoice');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInt64',
                '/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInt64', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInt64', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedGet
     *
     * Gets the entity information for the given invoice id
     *
     * @param int $invoice_id The identifier of the invoice to retrieve (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel
     */
    public function accountingInvoicesIssuedGet($invoice_id, $version, $period, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedGetWithHttpInfo($invoice_id, $version, $period, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedGetWithHttpInfo
     *
     * Gets the entity information for the given invoice id
     *
     * @param int $invoice_id The identifier of the invoice to retrieve (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedGetWithHttpInfo($invoice_id, $version, $period, $accept_language = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_id when calling accountingInvoicesIssuedGet');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedGet');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedGet');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel',
                '/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedGetNextInvoiceNumber
     *
     * Gets the next invoice number using a specific numbering format
     *
     * @param string $period The period when to retrieve the invoice number (required)
     * @param int $numbering_format_id The numbering format id to use to compute the next invoice number (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultString
     */
    public function accountingInvoicesIssuedGetNextInvoiceNumber($period, $numbering_format_id, $version, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedGetNextInvoiceNumberWithHttpInfo($period, $numbering_format_id, $version, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedGetNextInvoiceNumberWithHttpInfo
     *
     * Gets the next invoice number using a specific numbering format
     *
     * @param string $period The period when to retrieve the invoice number (required)
     * @param int $numbering_format_id The numbering format id to use to compute the next invoice number (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultString, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedGetNextInvoiceNumberWithHttpInfo($period, $numbering_format_id, $version, $accept_language = null)
    {
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedGetNextInvoiceNumber');
        }
        // verify the required parameter 'numbering_format_id' is set
        if ($numbering_format_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $numbering_format_id when calling accountingInvoicesIssuedGetNextInvoiceNumber');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedGetNextInvoiceNumber');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/nextInvoiceNumber/{numberingFormatId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }
        // path params
        if ($numbering_format_id !== null) {
            $resourcePath = str_replace(
                "{" . "numberingFormatId" . "}",
                $this->apiClient->getSerializer()->toPathValue($numbering_format_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultString',
                '/api/v{version}/accounting/{period}/invoices/issued/nextInvoiceNumber/{numberingFormatId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultString', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultString', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedList
     *
     * Gets the issued invoices for the current company
     *
     * @param string $period  (required)
     * @param string $version API version (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $number Filters by invoice number (optional)
     * @param string $nif Filters by customer NIF (optional)
     * @param string $status Filters by one of these status:  Pending &#x3D;&amp;gt; Pending invoices  Incomplete &#x3D;&amp;gt; Incomplete invoices  Payed &#x3D;&amp;gt; Paid invoices  PendingIncomplete &#x3D;&amp;gt; Special value that creates a filter that retrieves pending and incomplete invoices  - Pending  - Incomplete  - Payed  - PendingIncomplete (optional)
     * @param bool $expiry_status Filters by expired invoices &#x3D;&amp;gt; true   Filters by NOT expired invoices &#x3D;&amp;gt; false (optional)
     * @param string $notes Filters by private notes (optional)
     * @param float $taxable_amount_from Filters by the invoice taxable amount, gets invoices starting from the current value or higher (optional)
     * @param float $taxable_amount_to Filters by the invoice taxable amount, gets invoices starting from the current value or lesser (optional)
     * @param float $amount_from Filters by the invoice amount, gets invoices starting from the current value or higher (optional)
     * @param float $amount_to Filters by the invoice amount, gets invoices starting from the current value or lesser (optional)
     * @param string $tax_type Needs to be informed along with any tax... filter, otherwise won&#39;t do anything.   Determines on which tax are gonna be applied the other tax filters. Avaible values:  VAT &#x3D;&amp;gt; IVA |  RE &#x3D;&amp;gt; RE |  RETENTION &#x3D;&amp;gt; IRPF  - Vat  - Re  - Retention (optional)
     * @param float $tax_percentage Filters by TaxPercentage, retrieves invoices with a specific tax percentage from a specific tax type, must be informed along with TaxType (optional)
     * @param float $tax_amount_from Filters by the invoice tax amount, gets invoices starting from the current value or higher, must be informed along with TaxType (optional)
     * @param float $tax_amount_to Filters by the invoice tax amount, gets invoices starting from the current value or lesser, must be informed along with TaxType (optional)
     * @param int $tag_id Filters by a specific tag id (optional)
     * @param int $numbering_format_id Filters by invoice numbering serie Id (optional)
     * @param string $customer_organization_name Filters by invoice customer organization name (optional)
     * @param string $from_date Filters by the invoice date, gets invoices starting from the current date or higher  When calling this filter from API the date format must be: dd/MM/yyyy HH:mm:ss (optional)
     * @param string $to_date Filters by the invoice date, gets invoices starting from the current date or lesser  When calling this filter from API the date format must be: dd/MM/yyyy HH:mm:ss (optional)
     * @param int $income_type Filters by income type allows only numbers that belong to the group 7 of the PGC (optional)
     * @param string $sort The response can be sorted by:   - number (Sorts the invoices by number)  - date (Sorts the invoices by date)  - entity (Sorts the invoices by enyity name)  - status (Sorts the invoices by status)  - amount (Sorts the invoices by total taxable amount)&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+name (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel
     */
    public function accountingInvoicesIssuedList($period, $version, $start_index = null, $num_rows = null, $number = null, $nif = null, $status = null, $expiry_status = null, $notes = null, $taxable_amount_from = null, $taxable_amount_to = null, $amount_from = null, $amount_to = null, $tax_type = null, $tax_percentage = null, $tax_amount_from = null, $tax_amount_to = null, $tag_id = null, $numbering_format_id = null, $customer_organization_name = null, $from_date = null, $to_date = null, $income_type = null, $sort = null, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedListWithHttpInfo($period, $version, $start_index, $num_rows, $number, $nif, $status, $expiry_status, $notes, $taxable_amount_from, $taxable_amount_to, $amount_from, $amount_to, $tax_type, $tax_percentage, $tax_amount_from, $tax_amount_to, $tag_id, $numbering_format_id, $customer_organization_name, $from_date, $to_date, $income_type, $sort, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedListWithHttpInfo
     *
     * Gets the issued invoices for the current company
     *
     * @param string $period  (required)
     * @param string $version API version (required)
     * @param int $start_index  (optional)
     * @param int $num_rows  (optional)
     * @param string $number Filters by invoice number (optional)
     * @param string $nif Filters by customer NIF (optional)
     * @param string $status Filters by one of these status:  Pending &#x3D;&amp;gt; Pending invoices  Incomplete &#x3D;&amp;gt; Incomplete invoices  Payed &#x3D;&amp;gt; Paid invoices  PendingIncomplete &#x3D;&amp;gt; Special value that creates a filter that retrieves pending and incomplete invoices  - Pending  - Incomplete  - Payed  - PendingIncomplete (optional)
     * @param bool $expiry_status Filters by expired invoices &#x3D;&amp;gt; true   Filters by NOT expired invoices &#x3D;&amp;gt; false (optional)
     * @param string $notes Filters by private notes (optional)
     * @param float $taxable_amount_from Filters by the invoice taxable amount, gets invoices starting from the current value or higher (optional)
     * @param float $taxable_amount_to Filters by the invoice taxable amount, gets invoices starting from the current value or lesser (optional)
     * @param float $amount_from Filters by the invoice amount, gets invoices starting from the current value or higher (optional)
     * @param float $amount_to Filters by the invoice amount, gets invoices starting from the current value or lesser (optional)
     * @param string $tax_type Needs to be informed along with any tax... filter, otherwise won&#39;t do anything.   Determines on which tax are gonna be applied the other tax filters. Avaible values:  VAT &#x3D;&amp;gt; IVA |  RE &#x3D;&amp;gt; RE |  RETENTION &#x3D;&amp;gt; IRPF  - Vat  - Re  - Retention (optional)
     * @param float $tax_percentage Filters by TaxPercentage, retrieves invoices with a specific tax percentage from a specific tax type, must be informed along with TaxType (optional)
     * @param float $tax_amount_from Filters by the invoice tax amount, gets invoices starting from the current value or higher, must be informed along with TaxType (optional)
     * @param float $tax_amount_to Filters by the invoice tax amount, gets invoices starting from the current value or lesser, must be informed along with TaxType (optional)
     * @param int $tag_id Filters by a specific tag id (optional)
     * @param int $numbering_format_id Filters by invoice numbering serie Id (optional)
     * @param string $customer_organization_name Filters by invoice customer organization name (optional)
     * @param string $from_date Filters by the invoice date, gets invoices starting from the current date or higher  When calling this filter from API the date format must be: dd/MM/yyyy HH:mm:ss (optional)
     * @param string $to_date Filters by the invoice date, gets invoices starting from the current date or lesser  When calling this filter from API the date format must be: dd/MM/yyyy HH:mm:ss (optional)
     * @param int $income_type Filters by income type allows only numbers that belong to the group 7 of the PGC (optional)
     * @param string $sort The response can be sorted by:   - number (Sorts the invoices by number)  - date (Sorts the invoices by date)  - entity (Sorts the invoices by enyity name)  - status (Sorts the invoices by status)  - amount (Sorts the invoices by total taxable amount)&lt;br /&gt;&lt;br /&gt;Example: sort&#x3D;-date,+name (sort by date descending and name ascending) (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedListWithHttpInfo($period, $version, $start_index = null, $num_rows = null, $number = null, $nif = null, $status = null, $expiry_status = null, $notes = null, $taxable_amount_from = null, $taxable_amount_to = null, $amount_from = null, $amount_to = null, $tax_type = null, $tax_percentage = null, $tax_amount_from = null, $tax_amount_to = null, $tag_id = null, $numbering_format_id = null, $customer_organization_name = null, $from_date = null, $to_date = null, $income_type = null, $sort = null, $accept_language = null)
    {
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedList');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedList');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($num_rows !== null) {
            $queryParams['numRows'] = $this->apiClient->getSerializer()->toQueryValue($num_rows);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = $this->apiClient->getSerializer()->toQueryValue($number);
        }
        // query params
        if ($nif !== null) {
            $queryParams['nif'] = $this->apiClient->getSerializer()->toQueryValue($nif);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($expiry_status !== null) {
            $queryParams['expiryStatus'] = $this->apiClient->getSerializer()->toQueryValue($expiry_status);
        }
        // query params
        if ($notes !== null) {
            $queryParams['notes'] = $this->apiClient->getSerializer()->toQueryValue($notes);
        }
        // query params
        if ($taxable_amount_from !== null) {
            $queryParams['taxableAmountFrom'] = $this->apiClient->getSerializer()->toQueryValue($taxable_amount_from);
        }
        // query params
        if ($taxable_amount_to !== null) {
            $queryParams['taxableAmountTo'] = $this->apiClient->getSerializer()->toQueryValue($taxable_amount_to);
        }
        // query params
        if ($amount_from !== null) {
            $queryParams['amountFrom'] = $this->apiClient->getSerializer()->toQueryValue($amount_from);
        }
        // query params
        if ($amount_to !== null) {
            $queryParams['amountTo'] = $this->apiClient->getSerializer()->toQueryValue($amount_to);
        }
        // query params
        if ($tax_type !== null) {
            $queryParams['taxType'] = $this->apiClient->getSerializer()->toQueryValue($tax_type);
        }
        // query params
        if ($tax_percentage !== null) {
            $queryParams['taxPercentage'] = $this->apiClient->getSerializer()->toQueryValue($tax_percentage);
        }
        // query params
        if ($tax_amount_from !== null) {
            $queryParams['taxAmountFrom'] = $this->apiClient->getSerializer()->toQueryValue($tax_amount_from);
        }
        // query params
        if ($tax_amount_to !== null) {
            $queryParams['taxAmountTo'] = $this->apiClient->getSerializer()->toQueryValue($tax_amount_to);
        }
        // query params
        if ($tag_id !== null) {
            $queryParams['tagId'] = $this->apiClient->getSerializer()->toQueryValue($tag_id);
        }
        // query params
        if ($numbering_format_id !== null) {
            $queryParams['numberingFormatId'] = $this->apiClient->getSerializer()->toQueryValue($numbering_format_id);
        }
        // query params
        if ($customer_organization_name !== null) {
            $queryParams['customerOrganizationName'] = $this->apiClient->getSerializer()->toQueryValue($customer_organization_name);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = $this->apiClient->getSerializer()->toQueryValue($to_date);
        }
        // query params
        if ($income_type !== null) {
            $queryParams['incomeType'] = $this->apiClient->getSerializer()->toQueryValue($income_type);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel',
                '/api/v{version}/accounting/{period}/invoices/issued'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedOperationTypes
     *
     * Gets the list of valid operation types for the invoice type
     *
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultOperationTypeApiModel
     */
    public function accountingInvoicesIssuedOperationTypes($version, $period, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedOperationTypesWithHttpInfo($version, $period, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedOperationTypesWithHttpInfo
     *
     * Gets the list of valid operation types for the invoice type
     *
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultOperationTypeApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedOperationTypesWithHttpInfo($version, $period, $accept_language = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedOperationTypes');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedOperationTypes');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/operationTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultOperationTypeApiModel',
                '/api/v{version}/accounting/{period}/invoices/issued/operationTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultOperationTypeApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultOperationTypeApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedPdf
     *
     * Downloads the PDF for the given invoice
     *
     * @param int $invoice_id The identifier of the invoice to retrieve (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function accountingInvoicesIssuedPdf($invoice_id, $version, $period, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedPdfWithHttpInfo($invoice_id, $version, $period, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedPdfWithHttpInfo
     *
     * Downloads the PDF for the given invoice
     *
     * @param int $invoice_id The identifier of the invoice to retrieve (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedPdfWithHttpInfo($invoice_id, $version, $period, $accept_language = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_id when calling accountingInvoicesIssuedPdf');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedPdf');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedPdf');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}/pdf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}/pdf'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedSearchByNumber
     *
     * Searches the invoices with the given number
     *
     * @param string $period  (required)
     * @param string $version API version (required)
     * @param string $query  (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel
     */
    public function accountingInvoicesIssuedSearchByNumber($period, $version, $query = null, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedSearchByNumberWithHttpInfo($period, $version, $query, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedSearchByNumberWithHttpInfo
     *
     * Searches the invoices with the given number
     *
     * @param string $period  (required)
     * @param string $version API version (required)
     * @param string $query  (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedSearchByNumberWithHttpInfo($period, $version, $query = null, $accept_language = null)
    {
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedSearchByNumber');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedSearchByNumber');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/search/number";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel',
                '/api/v{version}/accounting/{period}/invoices/issued/search/number'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultInvoiceApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedSend
     *
     * Sends the invoice by email
     *
     * @param int $invoice_id  (required)
     * @param \Contasimple\Swagger\Client\Model\SendDocumentApiModel $message  (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultBoolean
     */
    public function accountingInvoicesIssuedSend($invoice_id, $message, $version, $period, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedSendWithHttpInfo($invoice_id, $message, $version, $period, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedSendWithHttpInfo
     *
     * Sends the invoice by email
     *
     * @param int $invoice_id  (required)
     * @param \Contasimple\Swagger\Client\Model\SendDocumentApiModel $message  (required)
     * @param string $version API version (required)
     * @param string $period  (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultBoolean, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedSendWithHttpInfo($invoice_id, $message, $version, $period, $accept_language = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_id when calling accountingInvoicesIssuedSend');
        }
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling accountingInvoicesIssuedSend');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedSend');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedSend');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}/send";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($message)) {
            $_tempBody = $message;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultBoolean',
                '/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}/send'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultBoolean', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultBoolean', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountingInvoicesIssuedUpdateInvoice
     *
     * Updates and issued invoice
     *
     * @param string $period The period where to create the invoice (required)
     * @param int $invoice_id The identifier of the invoice to update (required)
     * @param \Contasimple\Swagger\Client\Model\UpdateIssuedInvoiceApiModel $invoice The invoice information (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel
     */
    public function accountingInvoicesIssuedUpdateInvoice($period, $invoice_id, $invoice, $version, $accept_language = null)
    {
        list($response) = $this->accountingInvoicesIssuedUpdateInvoiceWithHttpInfo($period, $invoice_id, $invoice, $version, $accept_language);
        return $response;
    }

    /**
     * Operation accountingInvoicesIssuedUpdateInvoiceWithHttpInfo
     *
     * Updates and issued invoice
     *
     * @param string $period The period where to create the invoice (required)
     * @param int $invoice_id The identifier of the invoice to update (required)
     * @param \Contasimple\Swagger\Client\Model\UpdateIssuedInvoiceApiModel $invoice The invoice information (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountingInvoicesIssuedUpdateInvoiceWithHttpInfo($period, $invoice_id, $invoice, $version, $accept_language = null)
    {
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling accountingInvoicesIssuedUpdateInvoice');
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_id when calling accountingInvoicesIssuedUpdateInvoice');
        }
        // verify the required parameter 'invoice' is set
        if ($invoice === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice when calling accountingInvoicesIssuedUpdateInvoice');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling accountingInvoicesIssuedUpdateInvoice');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                "{" . "period" . "}",
                $this->apiClient->getSerializer()->toPathValue($period),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($invoice)) {
            $_tempBody = $invoice;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel',
                '/api/v{version}/accounting/{period}/invoices/issued/{invoiceId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInvoiceApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletedItemsCountDeletedIssuedInvoices
     *
     * Gets the number of deleted issued invoices from the date provided
     *
     * @param \DateTime $from_date The from date to start to retrieve the information (yyyy/MM/dd format). If an hour is received it will be ignored. (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiResultInt64
     */
    public function deletedItemsCountDeletedIssuedInvoices($from_date, $version, $accept_language = null)
    {
        list($response) = $this->deletedItemsCountDeletedIssuedInvoicesWithHttpInfo($from_date, $version, $accept_language);
        return $response;
    }

    /**
     * Operation deletedItemsCountDeletedIssuedInvoicesWithHttpInfo
     *
     * Gets the number of deleted issued invoices from the date provided
     *
     * @param \DateTime $from_date The from date to start to retrieve the information (yyyy/MM/dd format). If an hour is received it will be ignored. (required)
     * @param string $version API version (required)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiResultInt64, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletedItemsCountDeletedIssuedInvoicesWithHttpInfo($from_date, $version, $accept_language = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from_date when calling deletedItemsCountDeletedIssuedInvoices');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deletedItemsCountDeletedIssuedInvoices');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/invoices/issued/deletedItems/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiResultInt64',
                '/api/v{version}/accounting/invoices/issued/deletedItems/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiResultInt64', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiResultInt64', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletedItemsGetDeletedIssuedInvoices
     *
     * Gets the deleted issued invoices from the date provided
     *
     * @param \DateTime $from_date The from date to start to retrieve the information (yyyy/MM/dd format). If an hour is received it will be ignored. (required)
     * @param string $version API version (required)
     * @param int $start_index The start index for pagination. Default 0. (optional)
     * @param int $num_rows The number of rows for the pagination (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return \Contasimple\Swagger\Client\Model\ApiListResultDeletedItemApiModel
     */
    public function deletedItemsGetDeletedIssuedInvoices($from_date, $version, $start_index = null, $num_rows = null, $accept_language = null)
    {
        list($response) = $this->deletedItemsGetDeletedIssuedInvoicesWithHttpInfo($from_date, $version, $start_index, $num_rows, $accept_language);
        return $response;
    }

    /**
     * Operation deletedItemsGetDeletedIssuedInvoicesWithHttpInfo
     *
     * Gets the deleted issued invoices from the date provided
     *
     * @param \DateTime $from_date The from date to start to retrieve the information (yyyy/MM/dd format). If an hour is received it will be ignored. (required)
     * @param string $version API version (required)
     * @param int $start_index The start index for pagination. Default 0. (optional)
     * @param int $num_rows The number of rows for the pagination (optional)
     * @param string $accept_language The request language (optional)
     * @throws \Contasimple\Swagger\Client\ApiException on non-2xx response
     * @return array of \Contasimple\Swagger\Client\Model\ApiListResultDeletedItemApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletedItemsGetDeletedIssuedInvoicesWithHttpInfo($from_date, $version, $start_index = null, $num_rows = null, $accept_language = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from_date when calling deletedItemsGetDeletedIssuedInvoices');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling deletedItemsGetDeletedIssuedInvoices');
        }
        // parse inputs
        $resourcePath = "/api/v{version}/accounting/invoices/issued/deletedItems";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($num_rows !== null) {
            $queryParams['numRows'] = $this->apiClient->getSerializer()->toQueryValue($num_rows);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Contasimple\Swagger\Client\Model\ApiListResultDeletedItemApiModel',
                '/api/v{version}/accounting/invoices/issued/deletedItems'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Contasimple\Swagger\Client\Model\ApiListResultDeletedItemApiModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Contasimple\Swagger\Client\Model\ApiListResultDeletedItemApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
